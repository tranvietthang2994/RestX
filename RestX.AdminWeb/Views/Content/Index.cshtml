
@{
ViewBag.Title = "Content";
Layout = "_Layout";
}
<style>
	.el-upload-dragger {
		width: 100% !important;
	}

	.el-popper {
		z-index: 99999 !important;
	}

	.el-tree {
		overflow-y: scroll;
		height: 1000px;
	}

	.el-tag + .el-tag {
		margin-left: 10px;
	}

	code {
		font-style: italic;
		color: black;
		background-color: #F0F0F7;
		white-space: normal;
		word-break: break-word;
		display: inline-block;
	}
</style>
	<div>
		<div class="row wrapper border-bottom white-bg page-heading">
			<div class="col-lg-10">
				<h2>Content Admin</h2>
				<ol class="breadcrumb">
					<li>
						<a href="index.html">Home</a>
					</li>
					<li class="active">
						<strong>Content Admin</strong>
					</li>
				</ol>
			</div>
			<div class="col-lg-2">
			</div>
		</div>
		<div class="wrapper wrapper-content  animated fadeInRight">
			<div id="tenant-tabs" class="tabs-container">
			<ul class="nav nav-tabs">
				<li class="active">
					<a data-toggle="tab" href="#countries-destinations">Countries & Destinations</a>
				</li>
				<li>
					<a data-toggle="tab" href="#destination-content">Destination Content</a>
				</li>
				<li>
					<a data-toggle="tab" href="#meta-tags">Meta Tags</a>
				</li>
				<li>
					<a data-toggle="tab" href="#third-party-providers">Third Party Providers</a>
				</li>
				<li>
					<a data-toggle="tab" href="#content-uploads">Content Uploads</a>
				</li>
				<li>
					<a data-toggle="tab" href="#airlines-aircrafts">Airlines & Aircrafts</a>
				</li>
				<li>
					<a data-toggle="tab" href="#accommodation">Accommodation</a>
				</li>
			</ul>
			<div class="tab-content">
				<div id="countries-destinations" class="tab-pane active">
					<div class="panel-body">

						<div class="row">
							<el-alert
								v-if="syncAllCountriesJobId != null"
								title="Processing"
								description="All countries are being generated, this message will continue to update with progress until complete."
								show-icon
								class="margin-bottom-sm"
								type="warning"
								:closable="false">
							</el-alert>
						</div>

						<div class="row" v-if="syncAllCountriesJobId != null">
							<div class="col-md-12">
								<p>
									<a :href="'/jobs/jobs/details/' + syncAllCountriesJobId" target="_blank">View Job Status</a>
								</p>
							</div>
						</div>

						<div class="row">
							<el-alert
								v-if="syncAllDestinationsJobId != null"
								title="Processing"
								description="All Destinations are being generated, this message will continue to update with progress until complete."
								show-icon
								class="margin-bottom-sm"
								type="warning"
								:closable="false">
							</el-alert>
						</div>

						<div class="row" v-if="syncAllDestinationsJobId != null">
							<div class="col-md-12">
								<p>
									<a :href="'/jobs/jobs/details/' + syncAllDestinationsJobId" target="_blank">View Job Status</a>
								</p>
							</div>
						</div>

						<div class="row">
							<el-alert
								v-if="syncAllDestinationsOfCountryJobId != null"
								title="Processing"
								description="All destinations of country are being generated, this message will continue to update with progress until complete."
								show-icon
								class="margin-bottom-sm"
								type="warning"
								:closable="false">
							</el-alert>
						</div>

						<div class="row" v-if="syncAllDestinationsOfCountryJobId != null">
							<div class="col-md-12">
								<p>
									<a :href="'/jobs/jobs/details/' + syncAllDestinationsOfCountryJobId" target="_blank">View Job Status</a>
								</p>
							</div>
						</div>

						<div class="row">
							<el-alert
								v-if="syncSingleCountryJobId != null"
								title="Processing"
								description="Single countries are being generated, this message will continue to update with progress until complete."
								show-icon
								class="margin-bottom-sm"
								type="warning"
								:closable="false">
							</el-alert>
						</div>

						<div class="row" v-if="syncSingleCountryJobId != null">
							<div class="col-md-12">
								<p>
									<a :href="'/jobs/jobs/details/' + syncSingleCountryJobId" target="_blank">View Job Status</a>
								</p>
							</div>
						</div>

						<div class="row">
							<el-alert
								v-if="syncSingleDestinationJobId != null"
								title="Processing"
								description="Single Destinations are being generated, this message will continue to update with progress until complete."
								show-icon
								class="margin-bottom-sm"
								type="warning"
								:closable="false">
							</el-alert>
						</div>

						<div class="row" v-if="syncSingleDestinationJobId != null">
							<div class="col-md-12">
								<p>
									<a :href="'/jobs/jobs/details/' + syncSingleDestinationJobId" target="_blank">View Job Status</a>
								</p>
							</div>
						</div>

						<div class="row">
							<div class="col-md-3">
								<div class="row margin-bottom-sm">
									<div class="col-md-12">
										<button class="btn btn-primary margin-bottom-sm" data-toggle="modal" data-target="#new-country">New Country</button>
										<button class="btn btn-primary margin-bottom-sm" data-toggle="modal" data-target="#new-destination">New Destination</button>
										<button class="btn btn-primary margin-bottom-sm" data-toggle="modal" data-target="#sync-all">Sync All</button>
										<div id="new-destination" class="modal fade model_Role" tabindex="-1" role="dialog" aria-labelledby="dlgHeading" aria-hidden="true">
											<div class="modal-dialog">
												<div class="modal-content" style="margin-top: 5% !important;">
													<div class="modal-header">
														<h2 class="text-primary">Create Destination</h2>
													</div>
													<div class="modal-body form-horizontal">
														<div :class="[errors.has('new-destination.new-dest-name') ? 'has-error': '', 'form-group']">
															<label class="col-sm-2 control-label">Name</label>
															<div class="col-sm-10">
																<el-input name="new-dest-name" v-validate="'required'" data-vv-scope="new-destination" placeholder="Name" v-model="newDestination.name"></el-input>
															</div>
														</div>
														<div class="form-group">
															<label class="col-sm-2 control-label">Type</label>
															<div class="col-sm-10">
																<el-select v-model="newDestination.type" placeholder="Destination Type">
																	<el-option v-for="item in destinationTypes"
																			   :key="item.value"
																			   :label="item.label"
																			   :value="item.value">
																	</el-option>
																</el-select>
															</div>
														</div>
														<div :class="[errors.has('new-destination.new-dest-country') ? 'has-error': '', 'form-group']">
															<label class="col-sm-2 control-label">Country</label>
															<div class="col-sm-10">
																<el-select v-model="newDestination.countryCode"
																		   name="new-dest-country" v-validate="'required'"
																		   data-vv-scope="new-destination"
																		   filterable
																		   allow-create
																		   v-on:change="getDestinations"
																		   :collapse-tags="true"
																		   placeholder="Choose regions to associate with this country">
																	<el-option v-for="item in countryList"
																			   :key="item.id"
																			   :label="item.name"
																			   :value="item.id">
																	</el-option>
																</el-select>
															</div>
														</div>
														<div class="form-group" v-if="newDestination.countryCode != null && newDestination.countryCode != ''">
															<label class="col-sm-2 control-label">Parent Destination</label>
															<div class="col-sm-10">
																<el-select v-model="newDestination.parentId"
																		   filterable
																		   clearable
																		   loading-text="Loading destinations..."
																		   :loading="loadingCountryDestinations"
																		   placeholder="Choose a parent destination">
																	<el-option v-for="item in newDestinationCountryDestinations"
																			   :key="item.id"
																			   :label="item.name"
																			   :value="item.id"
																			   v-html="getIcon(item.type) + item.name">
																	</el-option>
																</el-select>
															</div>
														</div>
													</div>
													<div class="modal-footer">
														<button data-dismiss="modal" class="btn btn-default pull-left">Cancel</button>
														<el-button :disabled="saving" :loading="saving" @@click="createDestination" class="btn btn-primary pull-right">Add</el-button>
													</div>
												</div>
											</div>
										</div>
										<div id="new-country" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="dlgHeading" aria-hidden="true">
											<div class="modal-dialog">
												<div class="modal-content" style="margin-top: 5% !important;">
													<div class="modal-header">
														<h2 class="text-primary">Create Country</h2>
													</div>
													<div class="modal-body form-horizontal">
														<div :class="[errors.has('new-country.new-country-name') ? 'has-error': '', 'form-group']">
															<label class="col-sm-2 control-label">Name</label>
															<div class="col-sm-10">
																<el-input v-validate="'required'" data-vv-scope="new-country" name="new-country-name"
																		  placeholder="Name" v-model="newCountry.name">
																</el-input>
															</div>
														</div>
														<div :class="[errors.has('new-country.new-country-code') ? 'has-error': '', 'form-group']">
															<label class="col-sm-2 control-label">Country Code</label>
															<div class="col-sm-10">
																<el-input v-validate="'required'" data-vv-scope="new-country" name="new-country-code"
																		  placeholder="Country Code" v-model="newCountry.countryCode">
																</el-input>
															</div>
														</div>
														<div :class="[errors.has('new-country.new-country-currency-code') ? 'has-error': '', 'form-group']">
															<label class="col-sm-2 control-label">Currency Code</label>
															<div class="col-sm-10">
																<el-input v-validate="'required'" data-vv-scope="new-country" name="new-country-currency-code"
																		placeholder="Currency Code" v-model="newCountry.currencyCode">
																</el-input>
															</div>
														</div>
													</div>
													<div class="modal-footer">
														<button data-dismiss="modal" class="btn btn-default pull-left">Cancel</button>
														<el-button :disabled="saving" :loading="saving" @@click="createCountry" class="btn btn-primary pull-right">Add</el-button>
													</div>
												</div>
											</div>
										</div>
										<div id="sync-all" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="dlgHeading" aria-hidden="true">
											<div class="modal-dialog">
												<div class="modal-content" style="margin-top: 5% !important;">
													<div class="modal-header">
														<h2 class="text-primary">Sync All</h2>
													</div>
														<div class="modal-body form-horizontal">
														<div class="form-group">
															<div class="col-sm-10">
																<el-checkbox v-model="syncCountries"> Sync All Countries</el-checkbox>
															</div>
														</div>
														<div class="form-group">
															<div class="col-sm-10">
																	<el-checkbox v-model="syncDestinations"> Sync All Destinations</el-checkbox>
															</div>
														</div>
													 </div>
													 <div class="modal-footer">
														<el-button data-dismiss="modal" :loading="saving" class="btn btn-secondary pull-left">Cancel</el-button>
														<el-button :disabled="saving" :loading="saving" @@click="performSync" class="btn btn-primary pull-right"><i class="fa fa-play"></i> Sync</el-button>
													 </div>
												</div>
											</div>
										</div>
									</div>
								</div>
								<input placeholder="Filter countries"
									   v-model="countryFilter" class="form-control"/>
								<el-tree :data="countries"
										 :props="defaultProps"
										 :load="loadDestinations"
										 empty-text="Loading..."
										 lazy
										 :filter-node-method="filterCountries"
										 ref="contentTree"
										 @@node-click="showInfo"
										 :render-content="renderContent"
										 draggable
										 @@node-drop="handleDrop"
										 :allow-drop="allowDrop"
										 :allow-drag="allowDrag">
								</el-tree>
							</div>
							<div class="col-md-9">
								<div v-show="mode == 'country' && selectedCountry != null">
								<el-tabs v-model="countryTab">
									<el-tab-pane label="Country Overview" name="overview">
										<div class="form-horizontal">
											<template>
												<div style="display: flex; justify-content: flex-end; margin-bottom: 15px;">
													<template>
														<el-dropdown @@command="handleCommand">
															<el-button size="mini" class="btn btn-primary pull-right" ><i class="el-icon-arrow-down el-icon--left"></i> Actions</el-button>
															<el-dropdown-menu slot="dropdown">
																		<el-dropdown-item command="syncAllDestinationsOfCountry"><i class="fa fa-magic"></i>Sync All Destinations</el-dropdown-item>
																		<el-dropdown-item command="syncSingleCountry"><i class="fa fa-magic"></i>Sync Country</el-dropdown-item>
															</el-dropdown-menu>
														</el-dropdown>
													</template>
												</div>
											</template>
											<div class="form-group">
												<label class="col-sm-2 control-label">Name</label>
												<div class="col-sm-10">
													<input placeholder="Name" v-model="selectedCountry.name" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Aliases</label>
												<div class="col-sm-10">
													<input placeholder="Destination Name" v-model="selectedCountry.aliases" class="form-control"/>
													<span class="form-text m-b-none">
														Enter a list of comma separated names this country is also known by.
													</span>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Friendly Name</label>
												<div class="col-sm-10">
													<input placeholder="Friendly Name" v-model="selectedCountry.friendlyName" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">URL</label>
												<div class="col-sm-10">
													<input placeholder="URL" v-model="selectedCountry.urlName" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Page Title</label>
												<div class="col-sm-10">
													<input placeholder="Page Title" v-model="selectedCountry.pageTitle" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Meta Description</label>
												<div class="col-sm-10">
													<textarea rows="5" placeholder="Meta Description" v-model="selectedCountry.metaDescription" class="form-control"></textarea>
													<el-button size="mini" class="btn btn-primary pull-right margin-top-sm" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryMetaDescription"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-meta-description" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedContentMetaDescription">Update Meta Description</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Country Code</label>
												<div class="col-sm-10">
													<input placeholder="Country Code" v-model="selectedCountry.countryCode" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Region</label>
												<div class="col-sm-10">
													<el-select v-model="selectedCountry.isoRegion"
															   filterable
															   allow-create
															   :collapse-tags="true"
															   placeholder="Choose regions to associate with this country">
														<el-option v-for="item in regions"
																   :key="item.id"
																   :label="item.name"
																   :value="item.id">
														</el-option>
													</el-select>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Currency Code</label>
												<div class="col-sm-10">
													<input placeholder="Currency Code" v-model="selectedCountry.currencyCode" class="form-control"/>
													<el-button v-if="!selectedCountry.currencyCode || selectedCountry.currencyCode.trim() === ''"  size="mini" class="btn btn-primary pull-right margin-top-sm" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryCurrencyCode"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-currency-code" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryCurrencyCode">Update Currency Code</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">International Dialling Code</label>
												<div class="col-sm-10">
													<input placeholder="International Dialling Code" v-model="selectedCountry.internationalDiallingCode" class="form-control"/>
													<el-button size="mini" class="btn btn-primary pull-right margin-top-sm" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryDiallingCode"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-dialling-code" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryDiallingCode">Update Dialling Code</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Overview</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.overview" name="Overview" placeholder="Overview"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryOverview"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedContent">Update Overview</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Extended Overview</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.extendedOverview" name="ExtendedOverview" placeholder="Extended Overview"></trumbowyg>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Best Time To Visit</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.bestTimeToVisit" name="BestTimeToVisit" placeholder="Best Time To Visit"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryBestTimeToVisit"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-best-time-to-visit" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryBestTimeToVisit">Update Best Time To Visit</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">What To Read/Listen/Watch/Buy</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.whatToReadListenWatchBuy" name="WhatToRead/Listen/Watch/Buy" placeholder="What To Read/Listen/Watch/Buy"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryWhatToReadListenWatchBuy"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-what-to-read-listen-watch-buy" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryWhatToReadListenWatchBuy">Update What To Read/Listen/Watch/Buy</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Food & Drink</label>
												<div class="col-sm-10">
														<trumbowyg v-model="selectedCountry.foodAndDrink" name="Food&Drink" placeholder="Food & Drink"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryFoodDrink"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-food-drink" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryFoodDrink">Update Food & Drink</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">What To Pack</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.whatToPack" name="WhatToPack" placeholder="What To Pack"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryWhatToPack"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-what-to-pack" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryWhatToPack">Update What To Pack</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Events</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.events" name="Events" placeholder="Events"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryEvents"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-events" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryEvents">Update Events</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Facts / Did You Know</label>
												<div class="col-sm-10">
														<trumbowyg v-model="selectedCountry.didYouKnow" name="Fact" placeholder="Facts / Did You Know"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryFacts"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-facts" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryFacts">Update Facts</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Electricity Details</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.electricityDetails" name="ElectricityDetails" placeholder="Electricity Details"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryElectricity"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-electricity" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedElectricity">Update Electricity Details</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Currency Details</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.currencyDetails" name="CurrencyDetails" id="dsfsaDFASDF" placeholder="Currency Details"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryCurrencyDetail"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-currency" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedCurrencyDetail">Update Currency Detail</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Language</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.language" name="Language" placeholder="Language"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryLanguage"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-language" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedLanguage">Update Language</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Passport & Visa Info</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.passportAndVisaDetails" name="Passport&VisaInfo" placeholder="Passport & Visa Info"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryPassport"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-passport" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedPassport">Update Passport & Visa Details</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Getting Around</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.gettingAroundDetails" name="GettingAroundDetails" placeholder="Getting Around"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryAround"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-around" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedAround">Update Getting Around Details </el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Attraction Details</label>
												<div class="col-sm-10">
												<trumbowyg v-model="selectedCountry.attractionDetails" name="AttractionDetails" placeholder="Attraction Details"></trumbowyg>
												<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryAttraction"><i class="fa fa-magic"></i> Generate</el-button>
												<!-- Modal -->
													<div class="modal fade" id="generated-country-content-attraction" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedAttraction">Update Attraction Details</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Health</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.health" name="Health" placeholder="Health"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryHealth"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-health" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedHealth">Update Health</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Tipping</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.tipping" name="Tipping" placeholder="Tipping"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryTipping"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-tipping" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedTipping">Update Tipping</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Climate Info</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.climateInfo" name="ClimateInfo" placeholder="Climate Info"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryClimate"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-climate" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedClimate">Update Climate Info</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Safety</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.safety" name="Safety" placeholder="Safety"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountrySafety"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-safety" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountrySafety">Update Safety</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Customs & Culture</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.customs" name="Customs" placeholder="Customs"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryCustoms"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-customs" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedCustoms">Update Customs</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Duty Free</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.dutyFree" name="DutyFree" placeholder="Duty Free"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryDutyFree"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-duty-free" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedDutyFree">Update Duty Free</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Money</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.money" name="Money" placeholder="Money"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryMoney"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-money" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedMoney">Update Money</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Emergency Contact</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.emergencyContact" name="EmergencyContact" placeholder="Emergency Contact"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryEmergencyContact"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-emergency-contact" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedEmergencyContact">Update Emergency Contact</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Public Holidays</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.publicHolidays" name="PublicHolidays" placeholder="Public Holidays"></trumbowyg>
													<el-button size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateCountryPublicHolidays"><i class="fa fa-magic"></i> Generate</el-button>
													<!-- Modal -->
													<div class="modal fade" id="generated-country-content-public-holidays" aria-labelledby="actionLabel">
														<div class="modal-dialog modal-lg">
															<div class="modal-content">
																<div class="modal-header">
																	<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
																	<h4 class="modal-title" id="actionLabel">Review Content</h4>
																</div>
																<div class="modal-body">
																	<trumbowyg v-model="generatedContent"></trumbowyg>
																	<div class="d-flex align-items-center mb-2">
																		<label class="col-form-label mb-0">Prompt:</label>
																		<code class="mb-0">{{prompt}}</code>
																	</div>
																</div>
																<div class="modal-footer">
																	<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
																	<el-button class="btn btn-primary pull-right" v-on:click="updateCountryGeneratedPublicHolidays">Update Public Holidays</el-button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
											<h2>Embassies</h2>
											<div class="form-group">
												<label class="col-sm-2 control-label">USA</label>
												<div class="col-sm-10">
													<input placeholder="US" v-model="selectedCountry.embassyConsulatesIn.us" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">UK</label>
												<div class="col-sm-10">
													<input placeholder="UK" v-model="selectedCountry.embassyConsulatesIn.uk" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Canada</label>
												<div class="col-sm-10">
													<input placeholder="CA" v-model="selectedCountry.embassyConsulatesIn.ca" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">South Africa</label>
												<div class="col-sm-10">
													<input placeholder="ZA" v-model="selectedCountry.embassyConsulatesIn.za" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Ireland</label>
												<div class="col-sm-10">
													<input placeholder="IR" v-model="selectedCountry.embassyConsulatesIn.ir" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">New Zealand</label>
												<div class="col-sm-10">
													<input placeholder="NZ" v-model="selectedCountry.embassyConsulatesIn.nz" class="form-control"/>
												</div>
											</div>
											<h2>Foreign Embassies</h2>
											<div class="form-group">
												<label class="col-sm-2 control-label">USA</label>
												<div class="col-sm-10">
													<input placeholder="US" v-model="selectedCountry.embassyConsulates.us" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">UK</label>
												<div class="col-sm-10">
													<input placeholder="UK" v-model="selectedCountry.embassyConsulates.uk" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Canada</label>
												<div class="col-sm-10">
													<input placeholder="CA" v-model="selectedCountry.embassyConsulates.ca" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">South Africa</label>
												<div class="col-sm-10">
													<input placeholder="ZA" v-model="selectedCountry.embassyConsulates.za" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Ireland</label>
												<div class="col-sm-10">
													<input placeholder="IR" v-model="selectedCountry.embassyConsulates.ir" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">New Zealand</label>
												<div class="col-sm-10">
													<input placeholder="NZ" v-model="selectedCountry.embassyConsulates.nz" class="form-control"/>
												</div>
											</div>
											<h2>Entry Requirements</h2>
											<div class="form-group">
												<label class="col-sm-2 control-label">USA</label>
												<div class="col-sm-10">
													<input placeholder="US" v-model="selectedCountry.entryRequirements.us" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">UK</label>
												<div class="col-sm-10">
													<input placeholder="UK" v-model="selectedCountry.entryRequirements.uk" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Canada</label>
												<div class="col-sm-10">
													<input placeholder="CA" v-model="selectedCountry.entryRequirements.ca" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">South Africa</label>
												<div class="col-sm-10">
													<input placeholder="ZA" v-model="selectedCountry.entryRequirements.za" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Ireland</label>
												<div class="col-sm-10">
													<input placeholder="IR" v-model="selectedCountry.entryRequirements.ir" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">New Zealand</label>
												<div class="col-sm-10" id="nztext">
													<input placeholder="NZ" v-model="selectedCountry.entryRequirements.nz" class="form-control"/>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Advisory Notes</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.advisoryNotes" name="Advisory Notes" placeholder="Advisory Notes"></trumbowyg>
												</div>
											</div>
											<div class="form-group">
												<label class="col-sm-2 control-label">Warning Message</label>
												<div class="col-sm-10">
													<trumbowyg v-model="selectedCountry.warningMessage" name="Warning Message" placeholder="Warning Message"></trumbowyg>
												</div>
											</div>
										</div>
									</el-tab-pane>
									<el-tab-pane label="Banner Images" name="banners">
										<div class="row">
											<draggable v-model="selectedCountry.bannerImages" class="draggable">
												<div class="col-md-4 text-center" v-for="(image, index)  in selectedCountry.bannerImages" style="margin-bottom: 5px;">
													<a :href="image" target="_blank">
														<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
													</a>
													<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'country', 'banner', selectedCountry.id)"></el-button>
												</div>
											</draggable>
											<div class="col-md-4 text-center" style="margin-bottom: 5px;">
												<el-upload class="upload-demo"
														   drag
														   :action="'/api/content/content-image/country/banner/' + selectedCountry.id"
														   :on-success="countryImageUploaded"
														   multiple
														   :show-file-list="false"
														   accept=".jpg,.jpeg,.png,.gif"
														   :on-error="countryUploadError">
													<i class="el-icon-upload"></i>
													<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
												</el-upload>
											</div>
										</div>
									</el-tab-pane>
									<el-tab-pane label="Full Width Images" name="fullwidth">
										<div class="row">
											<draggable v-model="selectedCountry.fullWidthImages" class="draggable">
												<div class="col-md-4 text-center" v-for="(image, index)  in selectedCountry.fullWidthImages" style="margin-bottom: 5px;">
													<a :href="image" target="_blank">
														<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
													</a>
													<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'country', 'fullwidth', selectedCountry.id)"></el-button>
												</div>
											</draggable>
											<div class="col-md-4 text-center" style="margin-bottom: 5px;">
												<el-upload class="upload-demo"
														   drag
														   :action="'/api/content/content-image/country/fullwidth/' + selectedCountry.id"
														   :on-success="countryImageUploaded"
														   multiple
														   :show-file-list="false"
														   accept=".jpg,.jpeg,.png,.gif"
														   :on-error="countryUploadError">
													<i class="el-icon-upload"></i>
													<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
												</el-upload>
											</div>
										</div>
									</el-tab-pane>
									<el-tab-pane label="Gallery Images" name="gallery">
										<div class="row">
											<draggable v-model="selectedCountry.galleryImages" class="draggable">
												<div class="col-md-4 text-center" v-for="(image, index) in selectedCountry.galleryImages" style="margin-bottom: 5px;">
													<a :href="image" target="_blank">
														<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
													</a>
													<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'country', 'gallery', selectedCountry.id)"></el-button>
												</div>
											</draggable>
											<div class="col-md-4 text-center" style="margin-bottom: 5px;">
												<el-upload class="upload-demo"
														   drag
														   :action="'/api/content/content-image/country/gallery/' + selectedCountry.id"
														   :on-success="countryImageUploaded"
														   multiple
														   :show-file-list="false"
														   accept=".jpg,.jpeg,.png,.gif"
														   :on-error="countryUploadError">
													<i class="el-icon-upload"></i>
													<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
												</el-upload>
											</div>
										</div>
									</el-tab-pane>
									<el-tab-pane label="Narrow Images" name="narrow">
										<div class="row">
											<draggable v-model="selectedCountry.narrowImages" class="draggable">
												<div class="col-md-4 text-center" v-for="(image, index)  in selectedCountry.narrowImages" style="margin-bottom: 5px;">
													<a :href="image" target="_blank">
														<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
													</a>
													<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'country', 'narrow', selectedCountry.id)"></el-button>
												</div>
											</draggable>
											<div class="col-md-4 text-center" style="margin-bottom: 5px;">
												<el-upload class="upload-demo"
														   drag
														   :action="'/api/content/content-image/country/narrow/' + selectedCountry.id"
														   :on-success="countryImageUploaded"
														   multiple
														   :show-file-list="false"
														   accept=".jpg,.jpeg,.png,.gif"
														   :on-error="countryUploadError">
													<i class="el-icon-upload"></i>
													<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
												</el-upload>
											</div>
										</div>
									</el-tab-pane>
									<el-tab-pane label="Videos" name="videos">
									<div class="row">
										<div class="col-md-10">
											<div :class="[errors.has('countryVideo.url') ? 'has-error' : '', 'form-group']">
												<input class="form-control" placeholder="URL of video" v-validate="'required'" data-vv-scope="countryVideo" name="url" v-model="countryVideoUrl"/>
											</div>
										</div>
										<div class="col-md-2">
											<div class="form-group">
												<button class="btn btn-default" type="button" v-on:click="addCountryVideo"><span class="glyphicon glyphicon-plus"></span> Add</button>
											</div>
										</div>
									</div>
									<div class="alert alert-info text-center margin-top">
										If using Youtube links please ensure you use the embeded URL. Videos supported include Youtube, Vimeo and .mp3 and .mp4 videos.
									</div>
									<draggable v-model="selectedCountry.videos" class="draggable">
										<div v-bind:key="index" v-for="(video, index) in selectedCountry.videos" class="padding-block gray-lighter-block margin-bottom-sm">
											<div class="row">
												<div class="col-md-5">
													<div class="embed-responsive embed-responsive-16by9">
														<iframe class="embed-responsive-item" v-if="selectedCountry.videos[index].url.indexOf('https://www.youtube.com') >
																											-1
																											|| selectedCountry.videos[index].url.indexOf('https://youtu.be') > -1" :src="selectedCountry.videos[index].url" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
														</iframe>
														<video v-else :src="selectedCountry.videos[index].url" controls="true"></video>
													</div>
												</div>
												<div class="col-md-5 form-inverse">
													<div class="form-group">
														<label>Title</label>
														<el-input placeholder="Name" v-model="selectedCountry.videos[index].title" class="form-control"></el-input>
													</div>
													<div class="form-group">
														<label>Credit</label>
														<el-input placeholder="Name" v-model="selectedCountry.videos[index].credit" class="form-control"></el-input>
													</div>
													<div class="form-group">
														<label>Date</label>
														<el-date-picker v-model="selectedCountry.videos[index].date" type="date" :format="dateFormat" :value-format="dateFormatStore" placeholder="Date" class="datepicker form-control"></el-date-picker>
													</div>
												</div>
												<div class="col-md-2">
													<button class="btn btn-danger btn-block" v-on:click="removeCountryVideo(index)"><span class="glyphicon glyphicon-trash"></span> Remove</button>
												</div>
											</div>
										</div>
									</draggable>
								</el-tab-pane>
							</el-tabs>
								<div class="margin-top text-center">
									<el-button :disabled="saving" :loading="saving" class="btn btn-primary" v-on:click="saveCountry">Save</el-button>
									<el-button :disabled="saving" :loading="saving" class="btn btn-danger" v-on:click="deleteCountry(selectedCountry.id)">Delete</el-button>
								</div>
							</div>
							<div v-if="mode == 'destination' && selectedDestination != null">
							<el-tabs v-model="destinationTab">
							<el-tab-pane label="Destination Overview" name="overview">
								<template>
									<div style="display: flex; justify-content: flex-end; margin-bottom: 15px;">
										<el-dropdown v-if="selectedDestination.type === 1 || selectedDestination.type === 2" @@command="handleCommand">
										<el-button size="mini" class="btn btn-primary pull-right" ><i class="el-icon-arrow-down el-icon--left"></i> Actions</el-button>
										<el-dropdown-menu slot="dropdown">
												<el-dropdown-item command="syncSingleDestination"><i class="fa fa-magic"></i>Sync Destination</el-dropdown-item>
										</el-dropdown-menu>
										</el-dropdown>
									</div>
								</template>
								<div class="form-horizontal">
									<div class="form-group">
										<label class="col-sm-2 control-label">Name</label>
										<div class="col-sm-10">
											<el-input placeholder="Destination Name" v-model="selectedDestination.name"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Aliases</label>
										<div class="col-sm-10">
											<el-input placeholder="Destination Name" v-model="selectedDestination.aliases"></el-input>
											<span class="form-text m-b-none">
												Enter a list of comma seperated names this destination is also known by.
											</span>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Country Code</label>
										<div class="col-sm-10">
											<el-input placeholder="Country Code" v-model="selectedDestination.countryCode"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Destination Code</label>
										<div class="col-sm-10">
											<el-input placeholder="Destination Code" v-model="selectedDestination.destinationCode"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Type</label>
										<div class="col-sm-10">
											<el-select v-model="selectedDestination.type" placeholder="Destination Type">
												<el-option v-for="item in destinationTypes"
														   :key="item.value"
														   :label="item.label"
														   :value="item.value">
												</el-option>
											</el-select>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Friendly Name</label>
										<div class="col-sm-10">
											<el-input placeholder="Friendly Name" v-model="selectedDestination.friendlyName"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">URL</label>
										<div class="col-sm-10">
											<el-input placeholder="URL" v-model="selectedDestination.urlName"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Page Title</label>
										<div class="col-sm-10">
											<el-input placeholder="Page Title" v-model="selectedDestination.pageTitle"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Meta Description</label>
										<div class="col-sm-10">
											<textarea placeholder="Meta Description" v-model="selectedDestination.metaDescription" class="form-control"></textarea>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right margin-top-sm" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationMetaDescription"><i class="fa fa-magic"></i> Generate</el-button>
											<!-- Modal -->
											<div class="modal fade" id="generated-destination-content-meta-description" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updatDestinationMetaDescription">Update Meta Description</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Overview</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.overview" name="Overview" placeholder="Overview"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationOverview"><i class="fa fa-magic"></i> Generate</el-button>
											<!-- Modal -->
											<div class="modal fade" id="generated-destination-content" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationGeneratedContent">Update Overview</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Best Time To Visit</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.bestTimeToVisit" name="BestTimeToVisit" placeholder="Best Time To Visit"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationBestTimeToVisit"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
											<div class="modal fade" id="generated-destination-best-time-to-visit" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationBestTimeToVisit">Update Best Time To Visit</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Attractions</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.attractions" name="Attractions" placeholder="Attractions"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationAttractions"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
											<div class="modal fade" id="generated-destination-attractions" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationAttractions">Update Attractions</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Facts / Did You Know</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.facts" name="Facts/DidYouKnow" placeholder="Facts / Did You Know"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationFacts"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-facts" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationFacts">Generate Facts / Did You Know</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
											<label class="col-sm-2 control-label">Food & Drink</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.foodAndDrink" name="FoodDrink" placeholder="Food & Drink"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationFoodDrink"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-food-drink" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationFoodDrink">Generate Food & Drink</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">What To Pack</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.whatToPack" name="WhatToPack" placeholder="What To Pack"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationWhatToPack"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-what-to-pack" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationWhatToPack">Generate What To Pack</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Featured</label>
										<div class="col-sm-10">
											<el-checkbox v-model="selectedDestination.featured"></el-checkbox>
										</div>
									</div>
									<div v-if="selectedDestination.type != 3 && selectedDestination.type != 4 && selectedDestination.type != 5" class="form-group">
										<label class="col-sm-2 control-label">Getting Around</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.gettingAround" name="Getting Around" placeholder="Getting Around"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationGettingAround"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-getting-around" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationGettingAround">Generate Getting Around</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Safety</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.safety" name="Safety" placeholder="Safety"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationSafety"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-safety" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationSafety">Generate Safety</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div v-if="selectedDestination.type != 3 && selectedDestination.type != 4 && selectedDestination.type != 5" class="form-group">
										<label class="col-sm-2 control-label">Nightlife</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.nightlife" name="Nightlife" placeholder="Nightlife"></trumbowyg>
												<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationNightlife"><i class="fa fa-magic"></i>Generate</el-button>
												<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-nightlife" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationNightlife">Generate Nightlife</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div v-if="selectedDestination.type != 3 && selectedDestination.type != 4 && selectedDestination.type != 5" class="form-group">
										<label class="col-sm-2 control-label">Shopping Details</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.shoppingDetails" name="Shopping Details" placeholder="Shopping Details"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationShoppingDetails"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
											<div class="modal fade" id="generated-destination-content-shopping-detail" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationShoppingDetails">Generate Shopping Details</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Events</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.events" name="Events" placeholder="Events"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationEvents"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-events" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationEvents">Generate Events</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Climate Details</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.climateDetails" name="Climate Details" placeholder="Climate Details"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationClimateDetails"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-climate-details" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationClimateDetails">Generate Climate Details</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Families</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.families" name="Families" placeholder="Families"></trumbowyg>
											<el-button v-if="selectedDestination.type === 1 || selectedDestination.type === 2" size="mini" class="btn btn-primary pull-right" :loading="generatingContent" :disabled="generatingContent" v-on:click="generateDestinationFamilies"><i class="fa fa-magic"></i>Generate</el-button>
											<!-- Modal -->
												<div class="modal fade" id="generated-destination-content-families" aria-labelledby="actionLabel">
												<div class="modal-dialog modal-lg">
													<div class="modal-content">
														<div class="modal-header">
															<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
															<h4 class="modal-title" id="actionLabel">Review Content</h4>
														</div>
														<div class="modal-body">
															<trumbowyg v-model="generatedContent"></trumbowyg>
															<div class="d-flex align-items-center mb-2">
																<label class="col-form-label mb-0">Prompt:</label>
																<code class="mb-0">{{prompt}}</code>
															</div>
														</div>
														<div class="modal-footer">
															<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
															<el-button class="btn btn-primary pull-right" v-on:click="updateDestinationFamilies">Generate Families</el-button>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Longitude</label>
										<div class="col-sm-10">
											<el-input placeholder="Longitude" v-model="selectedDestination.longitude"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Latitude</label>
										<div class="col-sm-10">
											<el-input placeholder="Longitude" v-model="selectedDestination.latitude"></el-input>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Time Zone</label>
										<div class="col-sm-10">
											<el-select v-model="selectedDestination.timeZoneId">
												<el-option v-for="item in timezones"
														   :key="item.value"
														   :label="item.text"
														   :value="item.value">
												</el-option>
											</el-select>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Location</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.location" name="Location" placeholder="Location"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Transfer Terminals</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.transferTerminals" name="Transfer Terminals" placeholder="Transfer Terminals"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Transfer City</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.transferCity" name="Transfer City" placeholder="Transfer City"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Car Rental</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.carRental" name="Car Rental" placeholder="Car Rental"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Taxi</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.taxi" name="Taxi" placeholder="Taxi"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Airport Facilities</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.airportFacilities" name="Airport Facilities" placeholder="Airport Facilities"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Car Parking</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.carParking" name="Car Parking" placeholder="Car Parking"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Airport Hotels</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.airportHotels" name="Airport Hotels" placeholder="Airport Hotels"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
										<label class="col-sm-2 control-label">Advisory Notes</label>
										<div class="col-sm-10">
											<trumbowyg v-model="selectedDestination.advisoryNotes" name="Advisory Notes" placeholder="Advisory Notes"></trumbowyg>
										</div>
									</div>
									<div class="form-group">
								<label class="col-sm-2 control-label">Warning Message</label>
								<div class="col-sm-10">
									<trumbowyg v-model="selectedDestination.warningMessage" name="Warning Message" placeholder="Warning Message"></trumbowyg>
								</div>
							</div>
								</div>
							</el-tab-pane>
							<el-tab-pane label="Banner Images" name="banners">
								<div class="row">
									<draggable v-model="selectedDestination.bannerImages" class="draggable">
										<div class="col-md-4 text-center" v-for="(image, index)  in selectedDestination.bannerImages" style="margin-bottom: 5px;">
											<a :href="image" target="_blank">
												<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
											</a>
											<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'destination', 'banner', selectedDestination.id)"></el-button>
										</div>
									</draggable>
									<div class="col-md-4 text-center" style="margin-bottom: 5px;">
										<el-upload class="upload-demo"
												   drag
												   :action="'/api/content/content-image/destination/banner/' + selectedDestination.id"
												   :on-success="destinationImageUploaded"
												   multiple
												   :show-file-list="false"
												   accept=".jpg,.jpeg,.png,.gif"
												   :on-error="destinationUploadError">
											<i class="el-icon-upload"></i>
											<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
										</el-upload>
									</div>
								</div>
							</el-tab-pane>
							<el-tab-pane label="Full Width Images" name="fullwidth">
								<div class="row">
									<draggable v-model="selectedDestination.fullWidthImages" class="draggable">
										<div class="col-md-4 text-center" v-for="(image, index)  in selectedDestination.fullWidthImages" style="margin-bottom: 5px;">
											<a :href="image" target="_blank">
												<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
											</a>
											<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'destination', 'fullwidth', selectedDestination.id)"></el-button>
										</div>
									</draggable>
									<div class="col-md-4 text-center" style="margin-bottom: 5px;">
										<el-upload class="upload-demo"
												   drag
												   :action="'/api/content/content-image/destination/fullwidth/' + selectedDestination.id"
												   :on-success="destinationImageUploaded"
												   multiple
												   :show-file-list="false"
												   accept=".jpg,.jpeg,.png,.gif"
												   :on-error="destinationUploadError">
											<i class="el-icon-upload"></i>
											<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
										</el-upload>
									</div>
								</div>
							</el-tab-pane>
							<el-tab-pane label="Gallery Images" name="gallery">
								<div class="row">
									<draggable v-model="selectedDestination.galleryImages" class="draggable">
										<div class="col-md-4 text-center" v-for="(image, index)  in selectedDestination.galleryImages" style="margin-bottom: 5px;">
											<a :href="image" target="_blank">
												<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
											</a>
											<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'destination', 'gallery', selectedDestination.id)"></el-button>
										</div>
									</draggable>
									<div class="col-md-4 text-center" style="margin-bottom: 5px;">
										<el-upload class="upload-demo"
												   drag
												   :action="'/api/content/content-image/destination/gallery/' + selectedDestination.id"
												   :on-success="destinationImageUploaded"
												   multiple
												   :show-file-list="false"
												   accept=".jpg,.jpeg,.png,.gif"
												   :on-error="destinationUploadError">
											<i class="el-icon-upload"></i>
											<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
										</el-upload>
									</div>
								</div>
							</el-tab-pane>
							<el-tab-pane label="Narrow Images" name="narrow">
								<div class="row">
									<draggable v-model="selectedDestination.narrowImages" class="draggable">
										<div class="col-md-4 text-center" v-for="(image, index)  in selectedDestination.narrowImages" style="margin-bottom: 5px;">
											<a :href="image" target="_blank">
												<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom: 5px;"/><br/>
											</a>
											<el-button type="danger" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, 'destination', 'narrow', selectedDestination.id)"></el-button>
										</div>
									</draggable>
									<div class="col-md-4 text-center" style="margin-bottom: 5px;">
										<el-upload class="upload-demo"
												   drag
												   :action="'/api/content/content-image/destination/narrow/' + selectedDestination.id"
												   :on-success="destinationImageUploaded"
												   multiple
												   :show-file-list="false"
												   accept=".jpg,.jpeg,.png,.gif"
												   :on-error="destinationUploadError">
											<i class="el-icon-upload"></i>
											<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
										</el-upload>
									</div>
								</div>
							</el-tab-pane>
							<el-tab-pane label="Videos" name="videos">
								<div class="row">
									<div class="col-md-10">
										<div :class="[errors.has('destinationVideo.url') ? 'has-error' : '', 'form-group']">
											<input class="form-control" placeholder="URL of video" v-validate="'required'" data-vv-scope="destinationVideo" name="url" v-model="destinationVideoUrl"/>
										</div>
									</div>
									<div class="col-md-2">
										<div class="form-group">
											<button class="btn btn-default" type="button" v-on:click="addDestinationVideo"><span class="glyphicon glyphicon-plus"></span> Add</button>
										</div>
									</div>
								</div>
								<div class="alert alert-info text-center margin-top">
									If using Youtube links please ensure you use the embeded URL. Videos supported include Youtube, Vimeo and .mp3 and .mp4 videos.
								</div>
								<draggable v-model="selectedDestination.videos" class="draggable">
									<div v-bind:key="index" v-for="(video, index) in selectedDestination.videos" class="padding-block gray-lighter-block margin-bottom-sm">
										<div class="row">
											<div class="col-md-5">
												<div class="embed-responsive embed-responsive-16by9">
													<iframe class="embed-responsive-item" v-if="selectedDestination.videos[index].url.indexOf('https://www.youtube.com') >
																									-1
																									|| selectedDestination.videos[index].url.indexOf('https://youtu.be') > -1" :src="selectedDestination.videos[index].url" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
													</iframe>
													<video v-else :src="selectedDestination.videos[index].url" controls="true"></video>
												</div>
											</div>
											<div class="col-md-5 form-inverse">
												<div class="form-group">
													<label>Title</label>
													<el-input placeholder="Name" v-model="selectedDestination.videos[index].title" class="form-control"></el-input>
												</div>
												<div class="form-group">
													<label>Credit</label>
													<el-input placeholder="Name" v-model="selectedDestination.videos[index].credit" class="form-control"></el-input>
												</div>
												<div class="form-group">
													<label>Date</label>
													<el-date-picker v-model="selectedDestination.videos[index].date" type="date" :format="dateFormat" :value-format="dateFormatStore" placeholder="Date" class="datepicker form-control"></el-date-picker>
												</div>
											</div>
											<div class="col-md-2">
												<button class="btn btn-danger btn-block" v-on:click="removeDestinationVideo(index)"><span class="glyphicon glyphicon-trash"></span> Remove</button>
											</div>
										</div>
									</div>
								</draggable>
							</el-tab-pane>
							</el-tabs>
							<div class="margin-top text-center">
								<el-button :disabled="saving" :loading="saving" class="btn btn-primary" v-on:click="saveDestination">Save</el-button>
								<el-button :disabled="saving" :loading="saving" class="btn btn-danger" v-on:click="deleteDestination(selectedDestination.id)">Delete</el-button>
							</div>
							</div>
							<div v-if="mode != 'destination' && mode != 'country'">
								<p>Select a country or destination from the menu on the left.</p>
							</div>
							</div>
							</div>
						</div>
					</div>
					<div id="destination-content" class="tab-pane">
						<div class="panel-body">
							<div class="row">
								<div class="col-md-12">
									<destination-content-manager></destination-content-manager>
								</div>
							</div>
						</div>
					</div>
					<div id="meta-tags" class="tab-pane">
						<div class="panel-body">
							<div class="row">
								<div class="col-md-12">
									<meta-tag-manager></meta-tag-manager>
								</div>
							</div>
						</div>
					</div>
					<div id="third-party-providers" class="tab-pane">
						<div class="panel-body">
							<div class="row">
								<div class="col-md-6">
									<div class="ibox ">
										<div class="ibox-title">
											<h5>Asset Management</h5>
										</div>
										<div class="ibox-content">
											<p>
												Re-sync countries, this will go through all available cruises and get the distinct regions against them.
											</p>
											<div class=" m-t-sm">
												<a id="country-sync" href="#" class="btn btn-primary startTour"><i class="fa fa-play"></i> Sync Countries</a>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div id="content-uploads" class="tab-pane">
						<div class="panel-body">
							<div class="row">
								<div class="col-md-6">
									<div class="ibox ">
										<div class="ibox-title">
											<h5>Jet2 Hotels Upload</h5>
										</div>
										<div class="ibox-content">
											<p>
												Upload hotels
											</p>
											<div class=" m-t-sm">
												<el-upload :action="'/api/files/blob?directory=jet2/uploads&container=content&filename=jet2hotels.csv'"
														   :on-success="importJet2Hotels"
														   :show-file-list="false"
														   accept=".csv"
														   :on-error="uploadError" :limit="1">
													<el-button class="btn btn-primary" type="primary">Upload</el-button>
												</el-upload>
											</div>
											<p v-if="jet2HotelsJobId != null">
												<a :href="'/jobs/jobs/details/' + jet2HotelsJobId" target="_blank">View Job Status</a>
											</p>
										</div>
									</div>
								</div>
								<div class="col-md-6">
									<div class="ibox ">
										<div class="ibox-title">
											<h5>Jet2 Hotel Images</h5>
										</div>
										<div class="ibox-content">
											<p>
												Upload images
											</p>
											<div class=" m-t-sm">
												<el-upload :action="'/api/files/blob?directory=jet2/uploads&container=content&filename=jet2hotelimages.csv'"
														   :on-success="importJet2HotelImages"
														   :show-file-list="false"
														   accept=".csv"
														   :on-error="uploadError" :limit="1">
													<el-button class="btn btn-primary" type="primary">Upload</el-button>
												</el-upload>
											</div>
											<p v-if="jet2HotelImagesJobId != null">
												<a :href="'/jobs/jobs/details/' + jet2HotelImagesJobId" target="_blank">View Job Status</a>
											</p>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div id="airlines-aircrafts" class="tab-pane">
						<div class="panel-body">
							<div class="row">
								<div class="col-md-12">
									<airlines-aircrafts-manager></airlines-aircrafts-manager>
								</div>
							</div>
						</div>
					</div>
					<div id="accommodation" class="tab-pane">
						<div class="panel-body">
							<div class="row">
								<div class="col-md-12">
										<el-button :disabled="saving" :loading="saving" v-on:click="reindexAccommodation" class="btn btn-primary pull-right">Re-Index All Accommodation</el-button>
									<p v-if="reindexJobId != null">
										<a :href="'/jobs/jobs/details/' + reindexJobId" target="_blank">View Job Status</a>
									</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
	<div class="col-md-3">
		<div class="row">
			<button class="btn btn-primary" style="margin-bottom:5px;margin-left:15px;" data-toggle="modal" data-target="#new-destination-content">New</button>
			<div id="new-destination-content" class="modal fade model_Role" tabindex="-1" role="dialog" aria-labelledby="dlgHeading" aria-hidden="true">
				<div class="modal-dialog">
					<div class="modal-content" style="margin-top:5% !important;">
						<div class="modal-header">
							<h2 class="text-primary">New Destination Content</h2>
						</div>
						<div class="modal-body form-horizontal">
							<div :class="[errors.has('new-destination-content.destination-content-name') ? 'has-error': '', 'form-group']">
								<label class="col-sm-2 control-label">Name</label>
								<div class="col-sm-10">
									<el-input name="destination-content-name" v-validate="'required'" data-vv-scope="new-destination-content" placeholder="Name" v-model="newDestinationContent.name"></el-input>
								</div>
							</div>
							<div class="form-group">
								<label class="col-sm-2 control-label">Type</label>
								<div class="col-sm-10">
									<el-cascader
										class="form-control"
										v-model="contentTypeNew"
										v-validate="'required'"
										name="destination-content-type"
										:clearable="true"
										v-on:change="contentChangeNew"
										:options="destinationContentTypes"
										:props="contentTypeTreeProps"
										placeholder="Content Type">
									</el-cascader>
								</div>
							</div>
							<div class="form-group">
								<label class="col-sm-2 control-label">Status</label>
								<div class="col-sm-10">
									<el-select v-model="newDestinationContent.active" placeholder="Status">
										<el-option v-for="item in statuses"
												   :key="item.value"
												   :label="item.label"
												   :value="item.value">
										</el-option>
									</el-select>
								</div>
							</div>
						</div>
						<div class="modal-footer">
							<button data-dismiss="modal" class="btn btn-default pull-left">Cancel</button>
							<el-button :disabled="saving" :loading="saving" v-on:click="createDestinationContent" class="btn btn-primary pull-right">Create</el-button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-md-6">
				<div class="form-group">
					<input placeholder="Search..." name="search-term"
						   v-model="search.searchTerm" class="form-control" />
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group">
					<el-cascader
						class="form-control"
						v-model="search.destinationContentTypes"
						:clearable="true"
						:options="destinationContentTypes"
						:props="contentTypeTreeProps"
						placeholder="Content Type">
					</el-cascader>
				</div>
			</div>
		</div>
		<el-tree :data="destinationContent.items"
				 :props="defaultProps"
				 empty-text="No content"
				 ref="destinationContentTree"
				 @@node-click="showInfo"
				 :render-content="renderContent"
				 draggable
				 :filter-node-method="filterDestinationContent"
				 @@node-drop="handleDrop">
		</el-tree>
	</div>
	<div class="col-md-9">
		<div v-if="selectedDestinationContent != null && !loadingDestinationContent">
			<el-tabs v-model="tab">
				<el-tab-pane label="Overview" name="overview">
					<div class="form-horizontal">
						<div :class="[errors.has('destination-content.name') ? 'has-error': '', 'form-group']">
							<label class="col-sm-2 control-label">Name</label>
							<div class="col-sm-10">
								<input placeholder="Name" v-model="selectedDestinationContent.name" class="form-control"
									   name="name" v-validate="'required'" data-vv-scope="destination-content" />
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Type</label>
							<div class="col-sm-10">
								<el-cascader
									class="form-control"
									v-model="contentType"
									v-validate="'required'"
									name="type"
									:clearable="true"
									v-on:change="contentChange"
									:options="destinationContentTypes"
									:props="contentTypeTreeProps"
									placeholder="Content Type">
								</el-cascader>
							</div>
						</div>
						<div v-if="selectedDestinationContent.contentType == 23"  class="form-group">
							<label class="col-sm-2 control-label">Sport</label>
							<div class="col-sm-10">
								<el-input placeholder="Sport" v-model="selectedDestinationContent.sport"></el-input>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Status</label>
							<div class="col-sm-10">
								<el-select v-model="selectedDestinationContent.active" placeholder="Status">
									<el-option v-for="item in statuses"
											   :key="item.value"
											   :label="item.label"
											   :value="item.value">
									</el-option>
								</el-select>
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-10 col-sm-offset-2">
								<el-checkbox v-model="selectedDestinationContent.featured">Featured</el-checkbox>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Search Weighting</label>
							<div class="col-sm-10">
								<el-slider v-model="selectedDestinationContent.searchWeighting"></el-slider>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Page Title</label>
							<div class="col-sm-10">
								<el-input placeholder="Page Title" v-model="selectedDestinationContent.pageTitle"></el-input>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Meta Description</label>
							<div class="col-sm-10">
								<el-input placeholder="Meta Description" type="textarea"
											:rows="4" v-model="selectedDestinationContent.metaDescription">
								</el-input>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Overview</label>
							<div class="col-sm-10">
								<trumbowyg v-model="selectedDestinationContent.overview" name="Overview" placeholder="Overview"></trumbowyg>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Tags</label>
							<div class="col-sm-10">
								<tag-select v-model="selectedDestinationContent.tags"></tag-select>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Internal Notes</label>
							<div class="col-sm-10">
								<textarea rows="4" placeholder="Internal Notes"
												  v-model="selectedDestinationContent.internalNotes" class="form-control"></textarea>
							</div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label">Destination</label>
							<div class="col-sm-10">
								<el-select v-model="selectedDestinations" placeholder="Search a country/destination" class="form-control"
										   filterable remote :remote-method="searchDestinations" multiple :loading="loadingDestinations"
										   v-on:remove-tag="destinationRemoved">
									<el-option-group v-for="group in searchedDestinations"
													 :key="group.name"
													 :label="group.name">
										<el-option v-for="item in group.options"
												   :key="item.id"
												   :label="item.name"
												   :value="item.id">
										</el-option>
									</el-option-group>
								</el-select>
							</div>
						</div>
						<div :class="[errors.has('destination-content.latitude') ? 'has-error': '', 'form-group']">
							<label class="col-sm-2 control-label">Latitude</label>
							<div class="col-sm-10">
								<input placeholder="Latitude" v-model="selectedDestinationContent.latitude" class="form-control"
									   name="latitude" v-validate="'decimal'" data-vv-scope="destination-content" />
							</div>
						</div>
						<div :class="[errors.has('destination-content.longitude') ? 'has-error': '', 'form-group']">
							<label class="col-sm-2 control-label">Longitude</label>
							<div class="col-sm-10">
								<input placeholder="Longitude" v-model="selectedDestinationContent.longitude" class="form-control"
									   name="longitude" v-validate="'decimal'" data-vv-scope="destination-content" />
							</div>
						</div>
					</div>
				</el-tab-pane>
				<el-tab-pane label="Details" name="details">
					<div class="form-horizontal">
						<div v-if="selectedDestinationContent.contentType == 3" :class="[errors.has('destination-content.capacity') ? 'has-error': '', 'form-group']">
							<label class="col-sm-2 control-label">Capacity</label>
							<div class="col-sm-10">
								<input placeholder="Capacity" v-model="selectedDestinationContent.capacity" class="form-control"
									   name="capacity" v-validate="'numeric'" data-vv-scope="destination-content" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 5 || selectedDestinationContent.contentType == 14 || selectedDestinationContent.contentType == 17 || selectedDestinationContent.contentType == 7 || selectedDestinationContent.contentType == 12 || selectedDestinationContent.contentType == 8 || selectedDestinationContent.contentType == 4 || selectedDestinationContent.contentType == 18 || selectedDestinationContent.contentType == 6 || selectedDestinationContent.contentType == 23 || selectedDestinationContent.contentType == 16 || selectedDestinationContent.contentType == 22 || selectedDestinationContent.contentType == 3 || selectedDestinationContent.contentType == 13">
							<label class="col-sm-2 control-label">Address</label>
							<div class="col-sm-10">
								<input placeholder="Address" v-model="selectedDestinationContent.address" class="form-control" name="address" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 7 || selectedDestinationContent.contentType == 5 || selectedDestinationContent.contentType == 14 || selectedDestinationContent.contentType == 17 || selectedDestinationContent.contentType == 8 || selectedDestinationContent.contentType == 4 || selectedDestinationContent.contentType == 18 || selectedDestinationContent.contentType == 6 || selectedDestinationContent.contentType == 23 || selectedDestinationContent.contentType == 16 || selectedDestinationContent.contentType == 22 || selectedDestinationContent.contentType == 3 || selectedDestinationContent.contentType == 13">
							<label class="col-sm-2 control-label">Website</label>
							<div class="col-sm-10">
								<input placeholder="Website" v-model="selectedDestinationContent.website" class="form-control" name="website" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 5 || selectedDestinationContent.contentType == 14 || selectedDestinationContent.contentType == 17 || selectedDestinationContent.contentType == 12 || selectedDestinationContent.contentType == 6 || selectedDestinationContent.contentType == 23 || selectedDestinationContent.contentType == 16 || selectedDestinationContent.contentType == 22 || selectedDestinationContent.contentType == 3 || selectedDestinationContent.contentType == 13">
							<label class="col-sm-2 control-label" v-if="selectedDestinationContent.contentType != 17">Admission</label>
							<label class="col-sm-2 control-label" v-else>Budget</label>
							<div class="col-sm-10">
								<input placeholder="Admission" v-model="selectedDestinationContent.admission" class="form-control" name="admission" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 5 || selectedDestinationContent.contentType == 17 || selectedDestinationContent.contentType == 8 || selectedDestinationContent.contentType == 4 || selectedDestinationContent.contentType == 18 || selectedDestinationContent.contentType == 6 || selectedDestinationContent.contentType == 23 || selectedDestinationContent.contentType == 16 || selectedDestinationContent.contentType == 22 || selectedDestinationContent.contentType == 3 || selectedDestinationContent.contentType == 13">
							<label class="col-sm-2 control-label">Opening Times</label>
							<div class="col-sm-10">
								<input placeholder="Opening Times" v-model="selectedDestinationContent.openingTimes" class="form-control" name="openingTimes" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 5 || selectedDestinationContent.contentType == 17 || selectedDestinationContent.contentType == 7 || selectedDestinationContent.contentType == 8 || selectedDestinationContent.contentType == 4 || selectedDestinationContent.contentType == 6 || selectedDestinationContent.contentType == 23 || selectedDestinationContent.contentType == 16 || selectedDestinationContent.contentType == 22 || selectedDestinationContent.contentType == 3 || selectedDestinationContent.contentType == 13">
							<label class="col-sm-2 control-label">Transport</label>
							<div class="col-sm-10">
								<input placeholder="Transport" v-model="selectedDestinationContent.transport" class="form-control" name="transport" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 18 || selectedDestinationContent.contentType == 19">
							<label class="col-sm-2 control-label">Pick Up Location</label>
							<div class="col-sm-10">
								<input placeholder="Pick Up Location" v-model="selectedDestinationContent.pickUpLocation" class="form-control" name="pickUpLocation" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 18 || selectedDestinationContent.contentType == 19">
							<label class="col-sm-2 control-label">Drop Off Location</label>
							<div class="col-sm-10">
								<input placeholder="Drop Off Location" v-model="selectedDestinationContent.dropOffLocation" class="form-control" name="dropOffLocation" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 18">
							<label class="col-sm-2 control-label">Supplier</label>
							<div class="col-sm-10">
								<input placeholder="Supplier" v-model="selectedDestinationContent.supplier" class="form-control" name="supplier" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 16">
							<label class="col-sm-2 control-label">Start Date</label>
							<div class="col-sm-10">
								 <el-date-picker v-model="selectedDestinationContent.startDate"
																				type="date"
																				placeholder="Date"
																				:format="dateFormat"
																				:value-format="dateFormatStore"
																				data-vv-scope="leg-edit-form"
																				name="departure-date-airport">

																</el-date-picker>
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 16">
							<label class="col-sm-2 control-label">Start Time</label>
							<div class="col-sm-10">
								<input placeholder="Start Time" v-model="selectedDestinationContent.startTime" class="form-control" name="startTime" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 16">
							<label class="col-sm-2 control-label">End Date</label>
							<div class="col-sm-10">
								 <el-date-picker v-model="selectedDestinationContent.endDate"
																				type="date"
																				placeholder="Date"
																				:format="dateFormat"
																				:value-format="dateFormatStore"
																				data-vv-scope="leg-edit-form"
																				name="departure-date-airport">

																</el-date-picker>

							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 16">
							<label class="col-sm-2 control-label">End Time</label>
							<div class="col-sm-10">
								<input placeholder="End Time" v-model="selectedDestinationContent.endTime" class="form-control" name="endTime" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 16">
							<label class="col-sm-2 control-label">Heading</label>
							<div class="col-sm-10">
								<input placeholder="Heading" v-model="selectedDestinationContent.heading" class="form-control" name="heading" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 20 || selectedDestinationContent.contentType == 16">
							<label class="col-sm-2 control-label">Supplier</label>
							<div class="col-sm-10">
								<input placeholder="Supplier" v-model="selectedDestinationContent.supplier" class="form-control" name="supplier" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 3">
							<label class="col-sm-2 control-label">Sport</label>
							<div class="col-sm-10">
								<input placeholder="Sport" v-model="selectedDestinationContent.sport" class="form-control" name="sport" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 19">
							<label class="col-sm-2 control-label">Vehicle Type</label>
							<div class="col-sm-10">
								<input placeholder="Vehicle Type" v-model="selectedDestinationContent.vehicleType" class="form-control" name="vehicleType" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 19">
							<label class="col-sm-2 control-label">Duration</label>
							<div class="col-sm-10">
								<input placeholder="Duration" v-model="selectedDestinationContent.duration" class="form-control" name="duration" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 14">
							<label class="col-sm-2 control-label">Private</label>
							<div class="col-sm-10">
								<el-checkbox v-model="selectedDestinationContent.private"></el-checkbox>
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 14">
							<label class="col-sm-2 control-label">Green Fees</label>
							<div class="col-sm-10">
								<input placeholder="Green Fees" v-model="selectedDestinationContent.greenFees" class="form-control" name="greenFees" />
							</div>
						</div>

						<div class="form-group" v-if="selectedDestinationContent.contentType == 13">
							<label class="col-sm-2 control-label">Number Of Runs</label>
							<div class="col-sm-10">
								<input placeholder="Number Of Runs" v-model="selectedDestinationContent.numberOfRuns" class="form-control" name="numberOfRuns" />
							</div>
						</div>



					</div>
				</el-tab-pane>
				<el-tab-pane :label="selectedDestinationContent.contentType == 3 ? 'Stadium Maps' : selectedDestinationContent.contentType == 14 ? 'Course Maps' : selectedDestinationContent.contentType == 13 ? 'Piste Maps' : '' "
				v-if="selectedDestinationContent.contentType == 3 || selectedDestinationContent.contentType == 14 || selectedDestinationContent.contentType == 13" name="maps">
					<div class="row">
						<draggable v-model="selectedDestinationContent.maps" class="draggable">
							<div class="col-md-4 text-center" v-for="(image, index)  in selectedDestinationContent.maps" style="margin-bottom:5px;">
								<a :href="image" target="_blank">
									<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom:5px;" /><br />
								</a>
								<el-button type="danger" :disabled="saving" :loading="saving" icon="el-icon-delete" circle v-on:click="deleteMap(index, image, selectedDestinationContent.id)"></el-button>
							</div>
						</draggable>
						<div class="col-md-4 text-center" style="margin-bottom:5px;">
							<el-upload class="upload-demo"
									   drag
									   :action="'/api/content/destination-content/' + selectedDestinationContent.id + '/image'"
									   :on-success="mapUploaded"
									   multiple
									   :show-file-list="false"
									   accept=".jpg,.jpeg,.png,.gif"
									   :before-upload="startMapUpload"
									   :on-error="imageUploadError">
								<i class="el-icon-upload"></i>
								<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
							</el-upload>
						</div>
					</div>
				</el-tab-pane>
				<el-tab-pane label="Images" name="images">
					<div class="row">
						<draggable v-model="selectedDestinationContent.images" class="draggable">
							<div class="col-md-4 text-center" v-for="(image, index)  in selectedDestinationContent.images" style="margin-bottom:5px;">
								<a :href="image" target="_blank">
									<img class="img-responsive img-thumbnail" :src="image" style="margin-bottom:5px;" /><br />
								</a>
								<el-button type="danger" :disabled="saving" :loading="saving" icon="el-icon-delete" circle v-on:click="deleteImage(index, image, selectedDestinationContent.id)"></el-button>
							</div>
						</draggable>
						<div class="col-md-4 text-center" style="margin-bottom:5px;">
							<el-upload class="upload-demo"
									   drag
									   :action="'/api/content/destination-content/' + selectedDestinationContent.id + '/image'"
									   :on-success="imageUploaded"
									   multiple
									   :show-file-list="false"
									   accept=".jpg,.jpeg,.png,.gif"
									   :before-upload="startImageUpload"
									   :on-error="imageUploadError">
								<i class="el-icon-upload"></i>
								<div class="el-upload__text">Drop images here or <em>click to upload</em></div>
							</el-upload>
						</div>
					</div>
				</el-tab-pane>
				<el-tab-pane label="Videos" name="videos">
					<div class="row">
						<div class="col-md-10">
							<div :class="[errors.has('destinationContentVideo.url') ? 'has-error' : '', 'form-group']">
								<input class="form-control" placeholder="URL of video" v-validate="'required'" data-vv-scope="destinationContentVideo" name="url" v-model="destinationContentVideoUrl"/>
							</div>
						</div>
						<div class="col-md-2">
							<div class="form-group">
								<button class="btn btn-default" type="button" v-on:click="addDestinationContentVideo"><span class="glyphicon glyphicon-plus"></span> Add</button>
							</div>
						</div>
					</div>
					<div class="alert alert-info text-center margin-top">
						If using Youtube links please ensure you use the embeded URL. Videos supported include Youtube, Vimeo and .mp3 and .mp4 videos.
					</div>
					<draggable v-model="selectedDestinationContent.videos" class="draggable">
						<div v-bind:key="index" v-for="(video, index) in selectedDestinationContent.videos" class="padding-block gray-lighter-block margin-bottom-sm">
							<div class="row">
								<div class="col-md-5">
									<div class="embed-responsive embed-responsive-16by9">
										<iframe class="embed-responsive-item" v-if="selectedDestinationContent.videos[index].url.indexOf('https://www.youtube.com') >
																							-1
																							|| selectedDestinationContent.videos[index].url.indexOf('https://youtu.be') > -1" :src="selectedDestinationContent.videos[index].url" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
										</iframe>
										<video v-else :src="selectedDestinationContent.videos[index].url" controls="true"></video>
									</div>
								</div>
								<div class="col-md-5 form-inverse">
									<div class="form-group">
										<label>Title</label>
										<el-input placeholder="Name" v-model="selectedDestinationContent.videos[index].title" class="form-control"></el-input>
									</div>
									<div class="form-group">
										<label>Credit</label>
										<el-input placeholder="Name" v-model="selectedDestinationContent.videos[index].credit" class="form-control"></el-input>
									</div>
									<div class="form-group">
										<label>Date</label>
										<el-date-picker v-model="selectedDestinationContent.videos[index].date" type="date" :format="dateFormat" :value-format="dateFormatStore" placeholder="Date" class="datepicker form-control"></el-date-picker>
									</div>
								</div>
								<div class="col-md-2">
									<button class="btn btn-danger btn-block" v-on:click="removeDestinationContentVideo(index)"><span class="glyphicon glyphicon-trash"></span> Remove</button>
								</div>
							</div>
						</div>
					</draggable>
					</el-tab-pane>
					</el-tabs>
					<div class="margin-top text-center">
						<el-button :disabled="saving" :loading="saving" class="btn btn-primary" v-on:click="saveDestinationContent">Save</el-button>
						<el-button :disabled="saving" :loading="saving" class="btn btn-danger" v-on:click="deleteDestinationContent">Delete</el-button>
					</div>
				</div>
				<div v-if="selectedDestinationContent == null && !loadingDestinationContent">
					<p>Select a destination content item from the menu on the left.</p>
				</div>
				<div v-if="loadingDestinationContent" class="text-center">
					<img src="~/images/tprofile-loading.svg" style="max-width: 95px" />
				</div>
			</div>
		</div>
	<div class="block block-room-manager">
		<div class="padding-block gray-light-block margin-bottom-sm form-inverse form-responsive">
			<div class="row">
				<div class="col-md-2">
					<div class="form-group">
						<el-input placeholder="Search"
								  name="search"
								  clearable
								  v-on:keyup.enter.native="search"
								  prefix-icon="el-icon-search"
								  v-on:change="searchChange"
								  class="form-control"
								  v-model="searchText">
						</el-input>
					</div>
				</div>
				<div class="col-md-10 text-right">
					<button class="btn btn btn-secondary pull-right" v-on:click="addTag"><span class="glyphicon glyphicon-plus"></span> Add Tag</button>
				</div>
			</div>
		</div>
		<div class="row" v-if="tags.length > 0">
			<div class="col-sm-4">
				<div v-if="paginationOptions.totalCount > 0" class="pseudo-btn">
					<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
				</div>
			</div>
			<div class="col-sm-2 col-sm-offset-4">

			</div>
			<div class="col-sm-2">
				<div class="form-group">
					<el-select v-model="paginationOptions.itemsPerPage" v-on:change="changePageSize" class="form-control">
						<el-option v-for="option in pageSizeOptions" :key="option.value" :value="option.value" :label="option.text">
						</el-option>
					</el-select>
				</div>
			</div>
		</div>
		<el-alert v-if="tags.length == 0 && !isLoading" title="No custom tags have been defined yet."
				  type="info"
				  show-icon
				  :closable="false">
		</el-alert>
		<table class="table table-striped table-primary" v-if="tags.length > 0">
			<thead>
				<tr>
					<th>Tag</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				<tr v-for="(tag, index) in tags">
					<td>{{tag.value}}</td>
					<td>
						<button class="btn btn-primary pull-right" v-on:click="editTag(index)"><span class="glyphicon glyphicon-pencil"></span> Edit</button>
					</td>
				</tr>
			</tbody>
		</table>
		<div class="pagination-block" v-if="tags.length > 0">
			<div v-if="paginationOptions.totalCount > 0">
				<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
			</div>
			<nav v-if="paginationOptions.totalCount > paginationOptions.itemsPerPage">
				<el-pagination background
							   :page-size="paginationOptions.itemsPerPage"
							   :current-page.sync="paginationOptions.currentPage"
							   v-on:current-change="pageChanged"
							   layout="prev, pager, next"
							   :total="paginationOptions.totalCount">
				</el-pagination>
			</nav>
		</div>
		<!-- Modal -->
		<div class="modal fade" id="tag" aria-labelledby="actionLabel">
			<div class="modal-dialog modal-lg">
				<div class="modal-content" v-if="tag != null">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="actionLabel">Tag</h4>
					</div>
					<div class="modal-body">
						<div :class="[errors.has('value') ? 'has-error': '', 'form-group']">
							<label>Value</label>
							<input type="text" v-model="tag.value" v-validate="'required'" class="form-control" name="value" placeholder="Tag value" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-primary pull-right" v-on:click="saveTag" v-html="tag.id == null ? 'Add' : 'Save'"></el-button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-danger pull-right" v-on:click="deleteTag" v-if="tag.id != null">Delete</el-button>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="block block-room-manager">
		<div class="padding-block gray-light-block margin-bottom-sm form-inverse form-responsive">
			<div class="row">
				<div class="col-md-2">
					<div class="form-group">
						<el-input placeholder="Search"
								  name="search"
								  clearable
								  v-on:keyup.enter.native="search"
								  prefix-icon="el-icon-search"
								  v-on:change="searchChange"
								  class="form-control"
								  v-model="searchText">
						</el-input>
					</div>
				</div>
				<div class="col-sm-2">
					<div class="form-group">
						<el-select v-model="switchContent" v-on:change="reset">
							<el-option v-for="option in switchOptions" :key="option.key" :value="option.key" :label="option.text">
							</el-option>
						</el-select>
					</div>
				</div>
				<div class="col-md-8 text-right">
					<button class="btn btn btn-secondary pull-right" v-if="switchContent == 0" v-on:click="addAirline"><span class="glyphicon glyphicon-plus"></span> Add Airline</button>
					<button class="btn btn btn-secondary pull-right" v-if="switchContent == 1" v-on:click="addAircraft"><span class="glyphicon glyphicon-plus"></span> Add Aircraft</button>
				</div>
			</div>
		</div>
		<!-- Airline -->
		<div class="row" v-if="airlines.length > 0 && switchContent == 0">
			<div class="col-sm-4">
				<div v-if="paginationOptions.totalCount > 0" class="pseudo-btn">
					<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
				</div>
			</div>
			<div class="col-sm-2 col-sm-offset-4">

			</div>
			<div class="col-sm-2">
				<div class="form-group">
					<el-select v-model="paginationOptions.itemsPerPage" v-on:change="changePageSize">
						<el-option v-for="option in pageSizeOptions" :key="option.value" :value="option.value" :label="option.text">
						</el-option>
					</el-select>
				</div>
			</div>
		</div>
		<el-alert v-if="airlines.length == 0 && !isLoading && switchContent == 0" title="No airlines have been defined yet."
				  type="info"
				  show-icon
				  :closable="false">
		</el-alert>
		<table class="table table-striped table-primary" v-if="airlines.length > 0 && switchContent == 0">
			<thead>
				<tr>
					<th>Airline</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				<tr v-for="(airline, index) in airlines">
					<td>
						<img v-if="airline.logoUrl != null && airline.logoUrl != ''" :src="airline.logoUrl" style="width: 30px; margin-right: 5px"/>
						{{airline.name}}
					</td>
					<td>
						<button class="btn btn-primary pull-right" v-on:click="editAirline(index)"><span class="glyphicon glyphicon-pencil"></span> Edit</button>
					</td>
				</tr>
			</tbody>
		</table>
		<div class="pagination-block" v-if="airlines.length > 0 && switchContent == 0">
			<div v-if="paginationOptions.totalCount > 0">
				<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
			</div>
			<nav v-if="paginationOptions.totalCount > paginationOptions.itemsPerPage">
				<el-pagination background
							   :page-size="paginationOptions.itemsPerPage"
							   :current-page.sync="paginationOptions.currentPage"
							   v-on:current-change="pageChanged"
							   layout="prev, pager, next"
							   :total="paginationOptions.totalCount">
				</el-pagination>
			</nav>
		</div>
		<!-- Aircraft -->
		<div class="row" v-if="aircrafts.length > 0 && switchContent == 1">
			<div class="col-sm-4">
				<div v-if="paginationOptions.totalCount > 0" class="pseudo-btn">
					<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
				</div>
			</div>
			<div class="col-sm-2 col-sm-offset-4">

			</div>
			<div class="col-sm-2">
				<div class="form-group">
					<el-select v-model="paginationOptions.itemsPerPage" v-on:change="changePageSize" class="form-control">
						<el-option v-for="option in pageSizeOptions" :key="option.value" :value="option.value" :label="option.text">
						</el-option>
					</el-select>
				</div>
			</div>
		</div>
		<el-alert v-if="aircrafts.length == 0 && !isLoading && switchContent == 1" title="No aircrafts have been defined yet."
				  type="info"
				  show-icon
				  :closable="false">
		</el-alert>
		<table class="table table-striped table-primary" v-if="aircrafts.length > 0 && switchContent == 1">
			<thead>
				<tr>
					<th>Aircraft</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				<tr v-for="(aircraft, index) in aircrafts">
					<td>{{aircraft.name}}</td>
					<td>
						<button class="btn btn-primary pull-right" v-on:click="editAircraft(index)"><span class="glyphicon glyphicon-pencil"></span> Edit</button>
					</td>
				</tr>
			</tbody>
		</table>
		<div class="pagination-block" v-if="aircrafts.length > 0 && switchContent == 1">
			<div v-if="paginationOptions.totalCount > 0">
				<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
			</div>
			<nav v-if="paginationOptions.totalCount > paginationOptions.itemsPerPage">
				<el-pagination background
							   :page-size="paginationOptions.itemsPerPage"
							   :current-page.sync="paginationOptions.currentPage"
							   v-on:current-change="pageChanged"
							   layout="prev, pager, next"
							   :total="paginationOptions.totalCount">
				</el-pagination>
			</nav>
		</div>
		<!-- Modal -->
		<div class="modal fade" id="airline" aria-labelledby="actionLabel">
			<div class="modal-dialog modal-lg">
				<div class="modal-content" v-if="airline != null">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="actionLabel">Airline</h4>
					</div>
					<div class="modal-body">
						<div :class="[errors.has('value') ? 'has-error': '', 'form-group']">
							<label>Name</label>
							<input type="text" v-model="airline.name" v-validate="'required'" class="form-control" name="value" placeholder="Name" />
						</div>
						<div :class="[errors.has('code') ? 'has-error': '', 'form-group']">
							<label>IATA Code</label>
							<input type="text" v-model="airline.code" v-validate="'required'" class="form-control" name="code" placeholder="Code" />
						</div>
						<div class="form-group">
							<label>Logo</label>
							<div class="row text-center">
								<template v-if="airline.logoUrl != null && airline.logoUrl != ''">
									<a :href="airline.logoUrl" target="_blank">
										<img :src="airline.logoUrl" style="margin-bottom: 5px; width: 300px"/><br/>
									</a>
								</template>
							</div>
							<div class="row text-center">
								<el-upload class="upload-demo"
										action="/api/files/blob?directory=airlines/logo&container=content"
										:on-success="airlineLogoUploaded"
										:show-file-list="false"
										accept=".jpg,.jpeg,.png,.gif"
										:on-error="airlineLogoUploadError">
									<el-button class="btn btn-primary" type="primary"><i class="el-icon-upload"></i> Upload</el-button>
								</el-upload>
								<el-button  v-if="airline.logoUrl != null && airline.logoUrl != ''" class="btn btn-danger margin-top-sm" v-on:click="deleteAirlineLogo"><span class="glyphicon glyphicon-trash"></span> Delete</el-button>
							</div>
						</div>
						<div class="form-group">
							<label>Favicon</label>
							<div class="row text-center">
								<template v-if="airline.faviconUrl != null && airline.faviconUrl != ''">
									<a :href="airline.faviconUrl" target="_blank">
										<img :src="airline.faviconUrl" style="margin-bottom: 5px; width: 300px"/><br/>
									</a>
								</template>
							</div>
							<div class="row text-center">
								<el-upload class="upload-demo"
										action="/api/files/blob?directory=airlines/favicon&container=content"
										:on-success="airlineFaviconUploaded"
										:show-file-list="false"
										accept=".jpg,.jpeg,.png,.gif"
										:on-error="airlineFaviconUploadError">
									<el-button class="btn btn-primary" type="primary"><i class="el-icon-upload"></i> Upload</el-button>
								</el-upload>
								<el-button  v-if="airline.faviconUrl != null && airline.faviconUrl != ''" class="btn btn-danger margin-top-sm" v-on:click="deleteAirlineFavicon"><span class="glyphicon glyphicon-trash"></span>  Delete</el-button>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-primary pull-right" v-on:click="saveAirline" v-html="airline.id == null ? 'Add' : 'Save'"></el-button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-danger pull-right" v-on:click="deleteAirline" v-if="airline.id != null">Delete</el-button>
					</div>
				</div>
			</div>
		</div>
		<div class="modal fade" id="aircraft" aria-labelledby="actionLabel">
			<div class="modal-dialog modal-lg">
				<div class="modal-content" v-if="aircraft != null">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="actionLabel">Aircraft</h4>
					</div>
					<div class="modal-body">
						<div :class="[errors.has('value') ? 'has-error': '', 'form-group']">
							<label>Name</label>
							<input type="text" v-model="aircraft.name" v-validate="'required'" class="form-control" name="value" placeholder="Name" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-primary pull-right" v-on:click="saveAircraft" v-html="aircraft.id == null ? 'Add' : 'Save'"></el-button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-danger pull-right" v-on:click="deleteAircraft" v-if="aircraft.id != null">Delete</el-button>
					</div>
				</div>
			</div>
		</div>
	</div>
<script type="text/javascript">
	Vue.component("meta-tag-manager",
		{
			template: `#meta-tag-manager`,
			data: function () {
				return {
					tags: [],
					tag: null,
					saving: false,
					isLoading: false,
					searchText: '',
					paginationOptions: {
						currentPage: 1,
						totalPages: 2,
						itemsPerPage: 25,
						totalCount: 1,
						startFrom: 1,
						endFrom: 1
					},
					pageSizeOptions: [
						{
							text: 'Show 10 records',
							value: 10
						}, {
							text: 'Show 25 records',
							value: 25
						}, {
							text: 'Show 50 records',
							value: 50
						}, {
							text: 'Show 100 records',
							value: 100
						}
					]
				}
			},
			created: function () {
				this.loadTags();
			},
			methods: {
				loadTags: function () {
					var vm = this;
					vm.isLoading = true;
					axios.get(`/api/meta/tags?searchTerm=${vm.searchText}&page=${vm.paginationOptions.currentPage}&itemsPerPage=${vm.paginationOptions.itemsPerPage}`).then(function (response) {
						vm.tags = response.data.tags;
						vm.isLoading = false;
						vm.paginationOptions.currentPage = response.data.page;
						vm.paginationOptions.totalPages = response.data.totalPages;
						vm.paginationOptions.itemsPerPage = response.data.itemsPerPage;
						vm.paginationOptions.totalCount = response.data.totalCount;
						vm.paginationOptions.startFrom = 1 + (response.data.itemsPerPage * (response.data.page - 1));
						vm.paginationOptions.endFrom = response.data.tags.length + (response.data.itemsPerPage * (response.data.page - 1));
					}).catch(error => globalNotification('Error loading tags.', 'error'));
				},
				pageChanged(pageNum) {
					this.paginationOptions.currentPage = pageNum;
					this.loadTags();
				},
				changePageSize: function () {
					this.paginationOptions.currentPage = 1;
					this.loadTags();
				},
				search: function () {
					this.paginationOptions.currentPage = 1;
					this.searching = true;
					this.loadTags();
				},
				reset: function () {
					this.searchText = '';
					this.paginationOptions.currentPage = 1;
					this.loadTags();
				},
				searchChange: function(value) {
					if (value === '') {
						this.reset();
					}
				},
				editTag: function (index) {
					this.tag = this.tags[index];
					$('#tag').modal('show');
				},
				addTag: function () {
					this.tag = {
						id: null,
						value: null
					};
					$('#tag').modal('show');
				},
				saveTag: function () {
					this.$validator.validateAll().then((result) => {
						if (result) {
							this.saving = true;
							var vm = this;
							var data = JSON.stringify(this.tag);
							var config = { headers: { 'Content-Type': 'application/json' } };
							if (this.tag.id == null) {
								axios.put('/api/meta/tags', data, config).then(function () {
									globalNotification('Tag created.', 'success');
									vm.saving = false;
									vm.loadTags();
								}).catch(function () {
									vm.saving = false;
									globalNotification('Error creating tag.', 'error');
								});
							} else {
								axios.patch('/api/meta/tags/' + this.tag.id, data, config).then(
									function () {
										globalNotification('Tag saved.', 'success');
										vm.saving = false;
									}).catch(function () {
										vm.saving = false;
										globalNotification('Error saving tag.', 'error');
									});
							}
							$('#tag').modal('hide');
						}
					});
				},
				deleteTag: function () {
					this.$confirm(
						'This will permanently delete the tag as well as removing it from all associated items. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning',
							cancelButtonClass: 'btn btn-default',
							confirmButtonClass:'btn btn-danger'

						}).then(() => {
							this.saving = true;
							var vm = this;
							axios.delete('/api/meta/tags/' + this.tag.id).then(function () {
								vm.saving = false;
								globalNotification('Tag deleted.', 'success');
								vm.loadTags();
								$('#tag').modal('hide');
							}).catch(function () {
								vm.saving = false;
								globalNotification('Error deleting tag.', 'error');
							});
						});
				}
			}
		});
</script>
<script type="text/javascript">
	Vue.component("airlines-aircrafts-manager",
		{
			template: `#airlines-aircrafts-manager`,
			data: function () {
				return {
					switchContent: 0,
					switchOptions: [
						{
							key: 0,
							text: "Airline"
						}, {
							key: 1,
							text: "Aircraft"
						},
					],
					airlines: [],
					airline: null,
					aircrafts: [],
					aircraft: null,
					saving: false,
					isLoading: false,
					searchText: '',
					paginationOptions: {
						currentPage: 1,
						totalPages: 2,
						itemsPerPage: 25,
						totalCount: 1,
						startFrom: 1,
						endFrom: 1
					},
					pageSizeOptions: [
						{
							text: 'Show 10 records',
							value: 10
						}, {
							text: 'Show 25 records',
							value: 25
						}, {
							text: 'Show 50 records',
							value: 50
						}, {
							text: 'Show 100 records',
							value: 100
						}
					]
				}
			},
			created: function () {
				this.loadAirlines();
			},
			methods: {
				loadAirlines: function () {
					var vm = this;
					vm.isLoading = true;
					axios.get(`/api/content/airlines?searchTerm=${vm.searchText}&page=${vm.paginationOptions.currentPage}&itemsPerPage=${vm.paginationOptions.itemsPerPage}`).then(function (response) {
						vm.airlines = response.data.airlines;
						vm.isLoading = false;
						vm.paginationOptions.currentPage = response.data.page;
						vm.paginationOptions.totalPages = response.data.totalPages;
						vm.paginationOptions.itemsPerPage = response.data.itemsPerPage;
						vm.paginationOptions.totalCount = response.data.totalCount;
						vm.paginationOptions.startFrom = 1 + (response.data.itemsPerPage * (response.data.page - 1));
						vm.paginationOptions.endFrom = response.data.airlines.length + (response.data.itemsPerPage * (response.data.page - 1));
					}).catch(error => globalNotification('Error loading airlines.', 'error'));
				},
				loadAircrafts: function () {
					var vm = this;
					vm.isLoading = true;
					axios.get(`/api/content/aircrafts?searchTerm=${vm.searchText}&page=${vm.paginationOptions.currentPage}&itemsPerPage=${vm.paginationOptions.itemsPerPage}`).then(function (response) {
						vm.aircrafts = response.data.aircrafts;
						vm.isLoading = false;
						vm.paginationOptions.currentPage = response.data.page;
						vm.paginationOptions.totalPages = response.data.totalPages;
						vm.paginationOptions.itemsPerPage = response.data.itemsPerPage;
						vm.paginationOptions.totalCount = response.data.totalCount;
						vm.paginationOptions.startFrom = 1 + (response.data.itemsPerPage * (response.data.page - 1));
						vm.paginationOptions.endFrom = response.data.aircrafts.length + (response.data.itemsPerPage * (response.data.page - 1));
					}).catch(error => globalNotification('Error loading aircrafts.', 'error'));
				},
				pageChanged(pageNum) {
					this.paginationOptions.currentPage = pageNum;
					if (this.switchContent == 0) {
						this.loadAirlines();
					}
					else {
						this.loadAircrafts();
					}
				},
				changePageSize: function () {
					this.paginationOptions.currentPage = 1;
					if (this.switchContent == 0) {
						this.loadAirlines();
					}
					else {
						this.loadAircrafts();
					}
				},
				airlineLogoUploaded: function (response, file, fileList) {
					this.$set(this.airline, 'logoUrl', response);
				},
				deleteAirlineLogo: function () {
					this.$confirm(
						'Are you sure you want to delete this logo. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning',
							cancelButtonClass: 'btn btn-default',
							confirmButtonClass:'btn btn-danger'

						}).then(() => {
							this.$set(this.airline, 'logoUrl', null);
						})
				},
				airlineLogoUploadError: function (err, file, fileList) {
					globalNotification(err, 'error');
				},
				airlineFaviconUploaded: function (response, file, fileList) {
					this.$set(this.airline, 'faviconUrl', response);
				},
				deleteAirlineFavicon: function () {
					this.$confirm(
						'Are you sure you want to delete this favicon. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning',
							cancelButtonClass: 'btn btn-default',
							confirmButtonClass:'btn btn-danger'

						}).then(() => {
							this.$set(this.airline, 'faviconUrl', null);
						})
				},
				airlineFaviconUploadError: function (err, file, fileList) {
					globalNotification(err, 'error');
				},
				search: function () {
					this.paginationOptions.currentPage = 1;
					this.searching = true;
					if (this.switchContent == 0) {
						this.loadAirlines();
					}
					else {
						this.loadAircrafts();
					}
				},
				reset: function () {
					this.searchText = '';
					this.paginationOptions.currentPage = 1;
					if (this.switchContent == 0) {
						this.loadAirlines();
					}
					else {
						this.loadAircrafts();
					}
				},
				searchChange: function (value) {
					if (value === '') {
						this.reset();
					}
				},
				editAirline: function (index) {
					this.airline = this.airlines[index];
					$('#airline').modal('show');
				},
				editAircraft: function (index) {
					this.aircraft = this.aircrafts[index];
					$('#aircraft').modal('show');
				},
				addAirline: function () {
					this.airline = {
						id: null,
						name: null
					};
					$('#airline').modal('show');
				},
				addAircraft: function () {
					this.aircraft = {
						id: 0,
						name: null
					};
					$('#aircraft').modal('show');
				},
				saveAirline: function () {
					this.$validator.validateAll().then((result) => {
						if (result) {
							this.saving = true;
							var vm = this;
							var data = JSON.stringify(this.airline);
							var config = { headers: { 'Content-Type': 'application/json' } };
							if (this.airline.id == null) {
								axios.put('/api/content/airlines', data, config).then(function () {
									globalNotification('Airline created.', 'success');
									vm.saving = false;
									vm.loadAirlines();
								}).catch(function () {
									vm.saving = false;
									globalNotification('Error creating airline.', 'error');
								});
							} else {
								axios.patch('/api/content/airlines/' + this.airline.id, data, config).then(
									function () {
										globalNotification('Airline saved.', 'success');
										vm.saving = false;
									}).catch(function () {
										vm.saving = false;
										globalNotification('Error saving airline.', 'error');
									});
							}
							$('#airline').modal('hide');
						}
					});
				},
				saveAircraft: function () {
					this.$validator.validateAll().then((result) => {
						if (result) {
							this.saving = true;
							var vm = this;
							var data = JSON.stringify(this.aircraft);
							var config = { headers: { 'Content-Type': 'application/json' } };
							if (this.aircraft.id == null) {
								axios.put('/api/content/aircrafts', data, config).then(function () {
									globalNotification('Aircraft created.', 'success');
									vm.saving = false;
									vm.loadAircrafts();
								}).catch(function () {
									vm.saving = false;
									globalNotification('Error creating aircraft.', 'error');
								});
							} else {
								axios.patch('/api/content/aircrafts/' + this.aircraft.id, data, config).then(
									function () {
										globalNotification('Aircraft saved.', 'success');
										vm.saving = false;
									}).catch(function () {
										vm.saving = false;
										globalNotification('Error saving aircraft.', 'error');
									});
							}
							$('#aircraft').modal('hide');
						}
					});
				},
				deleteAirline: function () {
					this.$confirm(
						'This will permanently delete the airline. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning',
							cancelButtonClass: 'btn btn-default',
							confirmButtonClass: 'btn btn-danger'

						}).then(() => {
							this.saving = true;
							var vm = this;
							axios.delete('/api/content/airlines/' + this.airline.id).then(function () {
								vm.saving = false;
								globalNotification('Airline deleted.', 'success');
								vm.loadAirlines();
								$('#airline').modal('hide');
							}).catch(function () {
								vm.saving = false;
								globalNotification('Error deleting airline.', 'error');
							});
						});
				},
				deleteAircraft: function () {
					this.$confirm(
						'This will permanently delete the aircraft. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning',
							cancelButtonClass: 'btn btn-default',
							confirmButtonClass: 'btn btn-danger'

						}).then(() => {
							this.saving = true;
							var vm = this;
							axios.delete('/api/content/aircrafts/' + this.aircraft.id).then(function () {
								vm.saving = false;
								globalNotification('Aircraft deleted.', 'success');
								vm.loadAircrafts();
								$('#aircraft').modal('hide');
							}).catch(function () {
								vm.saving = false;
								globalNotification('Error deleting aircraft.', 'error');
							});
						});
				}
			}
		});
</script>
<script type="text/javascript">
	Vue.component("destination-content-manager",
		{
			template: '#destination-content-manager',
			watch: {
				search: {
					handler(val) {
						this.$refs.destinationContentTree.filter(val);
					},
					deep: true
				},
				selectedDestinations(val, prevVal) {
					if (this.loadingDestinationContent) return;

					if (val.length < prevVal.length || val.length === 0 || (this.searchedDestinations == null || this.searchedDestinations.length === 0)) {
					} else if (this.searchedDestinations != null || this.searchedDestinations.length !== 0) {
						var itemThatWasAdded = val.filter(function(item) {
							return !prevVal.includes(item);
						});

						for (var i1 = 0; i1 < itemThatWasAdded.length; i1++) {
							if (this.searchedDestinations[0].options.length > 0) {
								for (var i = 0; i < this.searchedDestinations[0].options.length; i++) {
									if (this.searchedDestinations[0].options[i].id === itemThatWasAdded[i1] && !this.selectedDestinationContent.countryIds.includes(itemThatWasAdded[i1])) {
										this.selectedDestinationContent.countryIds.push(itemThatWasAdded[i1]);
									}
								}
							}
							if (this.searchedDestinations[1].options.length > 0) {
								for (var i2 = 0; i2 < this.searchedDestinations[1].options.length; i2++) {
									if (this.searchedDestinations[1].options[i2].id === itemThatWasAdded[i1] && !this.selectedDestinationContent.destinationIds.includes(itemThatWasAdded[i1])) {
										this.selectedDestinationContent.destinationIds.push(itemThatWasAdded[i1]);
									}
								}
							}
						}
					}
				}
			},
			data: function () {
				return {
					itemToView: null,
					destinationContent: [],
					destinationContentVideoUrl: null,
					timezones: [],
					search: {
						searchTerm: null,
						destinationContentTypes: []
					},
					destinationContentTypes: [],
					statuses: [{
						value: false,
						label: 'Draft'
					}, {
						value: true,
						label: 'Live'
					}],
					loading: false,
					saving: false,
					newDestinationContent: {
						name: null,
						contentType: null
					},
					selectedDestinationContent: null,
					defaultProps: {
						children: 'children',
						label: 'name',
						isLeaf: 'isLeaf'
					},
					loadingDestinationContent: false,
					tab: 'overview',
					selectedDestinations: [],
					searchedDestinations: [],
					loadingDestinations: false,
					dateFormat: "dd/MM/yyyy",
					dateFormatStore: "yyyy-MM-dd",
					contentTypeTreeProps: {
						checkStrictly: true,
						children: 'children',
						label: 'name',
						value: 'id',
						expandTrigger: 'hover'
					},
					contentType: [],
					contentTypeNew: []
				}
			},
			created: function () {
				this.loadDestinationContent();
				axios.get('/api/content/destination-content-types')
					.then((response) => this.destinationContentTypes = response.data)
					.catch(() => globalNotification('There was an error loading content types', 'error'));
			},
			methods: {
				contentChange: function(node) {
					if (this.contentType.length == 0) {
						this.selectedDestinationContent.contentType = null;
						return;
					}

					var result = this.deepSearch(this.destinationContentTypes, 'id', (k, v) => v === this.contentType[this.contentType.length -1]);
					if (result == null) {
						this.selectedDestinationContent.contentType = null;
						this.contentType = null;
					} else {
						this.selectedDestinationContent.contentType = result.id;
					}
				},
				contentChangeNew: function(node) {
					if (this.contentTypeNew.length == 0) {
						this.newDestinationContent.contentType = null;
						return;
					}

					var result = this.deepSearch(this.destinationContentTypes, 'id', (k, v) => v === this.contentTypeNew[this.contentTypeNew.length -1]);

					if (result == null) {
						this.newDestinationContent.contentType = null;
						this.contentTypeNew = null;
					} else {
						this.newDestinationContent.contentType = result.id;
					}
				},
				deepSearch: function (object, key, predicate) {
					if (object.hasOwnProperty(key) && predicate(key, object[key]) === true) {
						return object;
					}

					for (var i = 0; i < Object.keys(object).length; i++) {
					  var value = object[Object.keys(object)[i]];
					  if (typeof value === "object" && value != null) {
						let o = this.deepSearch(object[Object.keys(object)[i]], key, predicate);
						if (o != null) return o;
					  }
					}
					return null;
				},
				deepSearchWithParent: function (object, key, predicate) {
					if (object.hasOwnProperty(key) && predicate(key, object[key]) === true) {
						return object;
					}

					for (var i = 0; i < Object.keys(object).length; i++) {
					  var value = object[Object.keys(object)[i]];
					  if (typeof value === "object" && value != null) {
						let o = this.deepSearch(object[Object.keys(object)[i]], key, predicate);
						if (o != null)
						{
							if (value.id != o.id) {
								return [value, o]
							} else {
								return [o];
							}
						}
					  }
					}
					return null;
				},
				destinationRemoved: function (item) {
					var destinationIndex = this.selectedDestinationContent.destinationIds.indexOf(item);
					if (destinationIndex !== -1) {
						this.selectedDestinationContent.destinationIds.splice(destinationIndex, 1);
					}

					var countryIndex = this.selectedDestinationContent.countryIds.indexOf(item);
					if (countryIndex !== -1) {
						this.selectedDestinationContent.countryIds.splice(countryIndex, 1);
					}
				},
				filterDestinationContent(value, data) {
					if (!value.searchTerm && value.destinationContentTypes.length === 0) return true;

					if (value.searchTerm && value.destinationContentTypes.length === 0) {
						return data.name.toLowerCase().indexOf(value.searchTerm.toLowerCase()) !== -1;
					} else if (value.searchTerm && value.destinationContentTypes.length > 0) {
						return data.name.toLowerCase().indexOf(value.searchTerm.toLowerCase()) !== -1 && value.destinationContentTypes.includes(data.contentType);
					} else if (!value.searchTerm && value.destinationContentTypes.length > 0) {
						return value.destinationContentTypes.includes(data.contentType);
					}

					return true;
				},
				searchDestinations: function(query) {
					if (query !== '') {
						var vm = this;
						this.loadingDestinations = true;
						axios.get(`/api/content/search-countries-and-destinations?searchTerm=${query}`)
							.then(function(response) {
								vm.loadingDestinations = false;
								vm.searchedDestinations = response.data;
							}).catch(() => {
									vm.loadingDestinations = false;
									globalNotification('There was an error searching destinations', 'error');
								}
							);
					}
				},
				loadDestinationContent: function() {
					var vm = this;
					vm.loading = true;
					var data = JSON.stringify({
						searchTerm: null,
						destinationContentTypes: []
					});
					var config = { headers: { 'Content-Type': 'application/json' } }
					axios.post(`/api/content/destination-content`, data, config)
						.then(function(response) {
							vm.loading = false;
							vm.destinationContent = response.data;
						}).catch((err) => {
							vm.loading = false;
							globalNotification('There was an error loading the destination content', 'error');
						});
				},
				showInfo: function(node, nodeProperty, tree) {
					var vm = this;
					vm.loadingDestinationContent = true;
					axios.get(`/api/content/destination-content/${node.id}`)
						.then(function(response) {
							vm.contentType = [];
							if (response.data.contentType != null) {
								var result = vm.deepSearchWithParent(vm.destinationContentTypes, 'id', (k, v) => v === response.data.contentType);
								if (result != null) {
									for (var i = 0; i < result.length; i++) {
										vm.contentType.push(result[i].id);
									}
								}
							}

							vm.selectedDestinationContent = response.data;
							vm.searchedDestinations = [
								{
									"name": "Countries",
									"options": vm.selectedDestinationContent.countries
								}, {
									"name": "Destinations",
									"options": vm.selectedDestinationContent.destinations
								}
							];

							var destinations = [];
							destinations.push(...vm.selectedDestinationContent.countryIds);
							destinations.push(...vm.selectedDestinationContent.destinationIds);

							vm.selectedDestinations = [];
							vm.selectedDestinations.push(...destinations);

							vm.tab = 'overview';
							vm.loadingDestinationContent = false;
						}).catch((err) => {
							vm.loadingDestinationContent = false;
							globalNotification('There was an error loading the destination content', 'error');
						});
				},
				startImageUpload: function() {
					this.saving = true;
					return true;
				},
				imageUploadError: function (err, file, fileList) {
					this.saving = false;
					globalNotification(err, 'error');
				},
				deleteImage: function (index, imagePath, contentId) {
					var vm = this;
					this.$confirm('This will permanently delete the file. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning'
						}).then(() => {
							vm.saving = true;
							axios.delete(`/api/content/destination-content/${contentId}/image?path=${imagePath}`)
								.then(function () {
									vm.selectedDestinationContent.images.splice(index, 1);
									globalNotification('Image deleted', 'success');
									vm.saving = false;
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error deleting the image', 'error');
								}
								);
						});
				},
				imageUploaded: function (response, file, fileList) {
					this.selectedDestinationContent.images.push(response);
					this.saving = false;
				},
				startMapUpload: function() {
					this.saving = true;
					return true;
				},
				imageMapError: function (err, file, fileList) {
					this.saving = false;
					globalNotification(err, 'error');
				},
				deleteMap: function (index, imagePath, contentId) {
					var vm = this;
					this.$confirm('This will permanently delete the file. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning'
						}).then(() => {
							vm.saving = true;
							axios.delete(`/api/content/destination-content/${contentId}/image?path=${imagePath}`)
								.then(function () {
									vm.selectedDestinationContent.maps.splice(index, 1);
									globalNotification('Image deleted', 'success');
									vm.saving = false;
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error deleting the image', 'error');
								}
								);
						});
				},
				mapUploaded: function (response, file, fileList) {
					if(typeof this.selectedDestinationContent.maps === 'undefined' || this.selectedDestinationContent.maps === null){
						this.selectedDestinationContent.maps = [];
					}
					this.selectedDestinationContent.maps.push(response);
					this.saving = false;
				},
				saveDestinationContent: function () {
					this.$validator.validateAll('destination-content').then((result) => {
						if (result) {
							var vm = this;
							vm.saving = true;



							if(this.selectedDestinationContent.contentType != 16){
								this.selectedDestinationContent.type == null;
							}

							var data = JSON.stringify(this.selectedDestinationContent);
							var config = { headers: { 'Content-Type': 'application/json' } }
							axios.patch(`/api/content/destination-content/${this.selectedDestinationContent.id}`, data, config)
								.then(function () {
									vm.saving = false;
									globalNotification('Destination content updated', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error saving the destination content', 'error');
								});
						}
					});
				},
				createDestinationContent: function () {
					this.$validator.validateAll('new-destination-content').then((result) => {
						if (result) {
							var vm = this;
							vm.saving = true;
							var data = JSON.stringify(this.newDestinationContent);
							var config = { headers: { 'Content-Type': 'application/json' } }
							axios.put('/api/content/destination-content', data, config)
								.then(function () {
									vm.saving = false;
									$('#new-destination-content').modal("hide");
									vm.newDestinationContent = {
										name: null,
										contentType: null
									};
									vm.contentTypeNew = [];
									vm.loadDestinationContent();
									globalNotification('Destination content created.', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error saving the destination content', 'error');
								});
						}
					});
				},
				deleteDestinationContent: function () {
					var vm = this;
					this.$confirm('Are you sure you want to delete this destination content and associated images?',
						'Warning',
						{
							confirmButtonText: 'Delete',
							cancelButtonText: 'Cancel',
							type: 'warning'
						}).then(() => {
							vm.saving = true;
							axios.delete(`/api/content/destination-content/${this.selectedDestinationContent.id}`)
								.then(function () {
									vm.saving = false;
									vm.selectedDestinationContent = null;
									vm.loadDestinationContent();
									globalNotification('Destination content deleted', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error deleting the destination content', 'error');
								}
								);
						});
				},
				addDestinationContentVideo: function() {
					this.$validator.validateAll("destinationContentVideo").then((result) => {
						if (result) {
							this.selectedDestinationContent.videos.push({
								mediaType: 1,
								url: this.destinationContentVideoUrl,
								title: null,
								credit: null,
								date: null,
							});
							this.destinationContentVideoUrl = "";
						}
					});
				},
				removeDestinationContentVideo: function(index) {
					this.$confirm("Are you sure you want to delete this video?",
						"Warning",
						{
							confirmButtonText: "Delete",
							cancelButtonText: "Cancel",
							type: "warning",
							confirmButtonClass: 'btn btn-danger',
							cancelButtonClass: 'btn btn-default'
						}).then(() => {
						this.selectedDestinationContent.videos.splice(index, 1);
					});
				},
				renderContent(h, { node, data, store }) {
					var nodePrefix = this.getIcon(node.data.contentType);
					let btn = h('span',
						{
							domProps: {
								innerHTML: nodePrefix + node.label
							}
						});
					return btn;
				},
				getIcon: function (typeId) {
					if (typeId === 0) {
						// Wedding Venue
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 1) {
						// Wedding Package
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 2) {
						// Wedding Reception
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 3) {
						// Stadium
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 4) {
						// Event Space
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 5) {
						// Tour
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 6) {
						// Attraction
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 7) {
						// National Park
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 8) {
						// Game Reserve
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 9) {
						// Ocean
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 10) {
						// River
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 11) {
						// Lake
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 12) {
						// Landmark
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 13) {
						// Ski Resort
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 14) {
						// Golf Course
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 15) {
						// Desert
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 16) {
						// Event
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 17) {
						// Restaurants
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 18) {
						// Car Hire
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 19) {
						// Transfer
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 20) {
						// Excursions
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 21) {
						// Escorted Tour
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 22) {
						// Rail
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId === 23) {
						// Rail
						return "<i class='fa fa-building'></i> ";
					}
					return '';
				},
				handleDrop(draggingNode, dropNode, dropType, ev) {
					var parentId = null;
					if (dropType === 'before' || dropType === 'after') {
						parentId = dropNode.data.parentId;
					}
					else if (dropType === 'inner') {
						parentId = dropNode.data.id;
					}

					var config = { headers: { 'Content-Type': 'application/json' } }
					axios.post(`/api/content/destination-content/${draggingNode.data.id}/parent/${parentId}`, null, config)
						.then(function () {
							globalNotification('Destination content updated', 'success');
						}).catch(() => {
								globalNotification('There was an error saving the destination content', 'error');
							}
						);
				}
			}
		}
	);
</script>
<script type="text/javascript">
	Vue.component("content-manager",
		{
			template: '#content-editor',
			watch: {
				countryFilter(val) {
					this.$refs.contentTree.filter(val);
				}
			},
			data: function() {
				return {
					saving: false,
					syncCountries: false,
					syncDestinations: false,
					countryTab: 'overview',
					destinationTab: 'overview',
					newCountry: {
						name: '',
						id: '',
						countryCode: '',
						currencyCode:''
					},
					newDestination: {
						name: '',
						id: '',
						countryCode: null,
						parentId: null,
						type: null
					},
					destinationTypes: [
						{
							value: 0,
							label: 'Not Specified'
						}, {
							value: 1,
							label: 'City'
						}, {
							value: 2,
							label: 'Region'
						}, {
							value: 3,
							label: 'Port'
						}, {
							value: 4,
							label: 'Airport'
						}, {
							value: 5,
							label: 'Railway Station'
						}
					],
					countryFilter: '',
					regions: [],
					countryList: [],
					countries: [],
					defaultProps: {
						children: 'destinations',
						label: 'name',
						isLeaf: 'isLeaf'
					},
					selectedCountry: {
						name: "",
						aliases: "",
						friendlyName: "",
						urlName: "",
						pageTitle: "",
						metaDescription: "",
						countryCode: "",
						isoRegion: "",
						internationalDiallingCode: "",
						overview: "",
						bestTimeToVisit: "",
						whatToReadListenWatchBuy: "",
						foodAndDrink: "",
						whatToPack: "",
						events: "",
						didYouKnow: "",
						extendedOverview: "",
						electricityDetails: "",
						currencyDetails: "",
						language: "",
						passportAndVisaDetails: "",
						gettingAroundDetails: "",
						attractionDetails: "",
						health: "",
						tipping: "",
						climateInfo: "",
						safety: "",
						customs: "",
						dutyFree: "",
						money: "",
						emergencyContact: "",
						embassyConsulatesIn: {
							us: "",
							uk: "",
							ca: "",
							za: "",
							ir: "",
							nz: ""
						},
						embassyConsulates: {
							us: "",
							uk: "",
							ca: "",
							za: "",
							ir: "",
							nz: ""
						},
						entryRequirements: {
							us: "",
							uk: "",
							ca: "",
							za: "",
							ir: "",
							nz: ""
						},
						advisoryNotes: "",
						warningMessage: ""
					},
					selectedDestination: {
						name: "",
						aliases: "",
						countryCode: "",
						destinationCode: "",
						type: "",
						friendlyName: "",
						urlName: "",
						pageTitle: "",
						metaDescription: "",
						overview: "",
						bestTimeToVisit: "",
						attractions: "",
						facts: "",
						foodAndDrink: "",
						whatToPack: "",
						safety: "",
						events: "",
						families: "",
						featured: false,
						gettingAround: "",
						nightlife: "",
						shoppingDetails: "",
						climateDetails: "",
						longitude: "",
						latitude: "",
						location: "",
						transferTerminals: "",
						transferCity: "",
						carRental: "",
						taxi: "",
						airportFacilities: "",
						carParking: "",
						airportHotels: "",
						advisoryNotes: "",
						warningMessage: ""
					},
					mode: "",
					jet2: {
						blobFilePath: '',
						file: ''
					},
					jet2HotelsJobId: null,
					jet2HotelImagesJobId: null,
					loadingCountryDestinations: false,
					newDestinationCountryDestinations: [],
					countryVideoUrl: null,
					destinationVideoUrl: null,
					dateFormat: "dd/MM/yyyy",
					dateFormatStore: "yyyy-MM-dd",
					generatingContent: false,
					generatedContent: '',
					reindexJobId: null,
					syncAllDestinationsOfCountryJobCookieName: 'sync-destinations-of-country-job-id',
					syncAllDestinationsOfCountryJobId: null,
					syncAllDestinationsJobCookieName: 'sync-all-destinations-job-id',
					syncAllDestinationsJobId: null,
					syncSingleDestinationJobCookieName: 'sync-single-destination-job-id',
					syncSingleDestinationJobId: null,
					syncAllCountriesJobCookieName: 'sync-all-countries-job-id',
					syncAllCountriesJobId: null,
					syncSingleCountryJobCookieName: 'sync-single-country-job-id',
					syncSingleCountryJobId: null,
					cancelling: false
				}
			},
			created: function() {
				this.loadCountries();
				this.loadRegions();
				this.loadCountryList();
				this.loadTimeZones();
			},
			methods: {
				reindexAccommodation: function() {
					var vm = this;
					this.reindexJobId = null;
					this.saving = true;
					var config = { headers: { 'Content-Type': 'application/json' } }
					axios.post('/api/content/reindex-accommodation', null, config)
						.then(function (response) {
							this.saving = false;
							vm.reindexJobId = response.data;
							globalNotification('Accommodation Re-Indexing', 'success');
						}).catch(() => {
							this.saving = false;
							globalNotification('There was an error re-indexing accommodation', 'error');
						});
				},
				generateCountryOverview: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Generate a 300 word description for ${this.selectedCountry.name} with paragraphs.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the overview', 'error');
						});
				},
				updateCountryGeneratedContent: function() {
					this.selectedCountry.overview = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content').modal("hide");
				},
				generateCountryMetaDescription: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Generate a description for ${this.selectedCountry.name}, maximum 155 characters.`;
					axios.get(`api/content/generate?prompt=${prompt}&isMarkdown=false`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-meta-description').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the extended meta description', 'error');
						});
				},
				updateCountryGeneratedContentMetaDescription: function() {
					this.selectedCountry.metaDescription = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-meta-description').modal("hide");
				},
				generateCountryCurrencyCode: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What is the currency code for ${this.selectedCountry.name}. Respond with just the currency code and no other comment.`;
					axios.get(`api/content/generate?prompt=${prompt}&isMarkdown=false`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-currency-code').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the currency code', 'error');
						});
				},
				updateCountryCurrencyCode: function() {
					this.selectedCountry.currencyCode = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-currency-code').modal("hide");
				},
				generateCountryDiallingCode: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What is the international dialing code for ${this.selectedCountry.name}. Respond with just the international dialing code and no other comment.`;
					axios.get(`api/content/generate?prompt=${prompt}&isMarkdown=false`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-dialling-code').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the dialling code', 'error');
						});
				},
				updateCountryDiallingCode: function() {
					this.selectedCountry.internationalDiallingCode = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-dialling-code').modal("hide");
				},
				generateCountryBestTimeToVisit: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `When is the best time to visit ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-best-time-to-visit').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the best time to visit', 'error');
						});
				},
				updateCountryBestTimeToVisit: function() {
					this.selectedCountry.bestTimeToVisit = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-best-time-to-visit').modal("hide");
				},
				generateCountryWhatToReadListenWatchBuy: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Generate an overview for what to read, listen, watch and buy for ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-what-to-read-listen-watch-buy').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting What To Read/Listen/Watch/Buy', 'error');
						});
				},
				updateCountryWhatToReadListenWatchBuy: function() {
					this.selectedCountry.whatToReadListenWatchBuy = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-what-to-read-listen-watch-buy').modal("hide");
				},
				generateCountryFoodDrink: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What to eat and drink when visiting ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-food-drink').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting Food & Drink', 'error');
						});
				},
				updateCountryFoodDrink: function() {
					this.selectedCountry.foodAndDrink = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-food-drink').modal("hide");
				},
				generateCountryWhatToPack: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me some suggestions on items to pack when visiting ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-what-to-pack').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting what to pack', 'error');
						});
				},
				updateCountryWhatToPack: function() {
					this.selectedCountry.whatToPack = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-what-to-pack').modal("hide");
				},
				generateCountryEvents: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a list of popular events in ${this.selectedCountry.name} which a tourist might be interesting in seeing. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-events').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting events', 'error');
						});
				},
				updateCountryEvents: function() {
					this.selectedCountry.events = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-events').modal("hide");
				},
				generateCountryFacts: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me some interesting 'did you know' facts about ${this.selectedCountry.name}. Respond in a maximum of 200 words with a couple of paragraphs. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-facts').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting facts', 'error');
						});
				},
				updateCountryFacts: function() {
					this.selectedCountry.didYouKnow = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-facts').modal("hide");
				},
				generateCountryElectricity: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What electricity points are used in ${this.selectedCountry.name}. Respond in a maximum of 50 words. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-electricity').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the electricity', 'error');
						});
				},
				updateCountryGeneratedElectricity: function() {
					this.selectedCountry.electricityDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-electricity').modal("hide");
				},
				generateCountryCurrencyDetail: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one line on the currency used in ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-currency').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the currency', 'error');
						});
				},
				updateCountryGeneratedCurrencyDetail: function() {
					this.selectedCountry.currencyDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-currency').modal("hide");
				},
				generateCountryLanguage: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one line on the language used in ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-language').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the language', 'error');
						});
				},
				updateCountryGeneratedLanguage: function() {
					this.selectedCountry.language = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-language').modal("hide");
				},
				generateCountryPassport: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a generic overview about the entry requirements for ${this.selectedCountry.name} as a visiting tourist? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-passport').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the passport', 'error');
						});
				},
				updateCountryGeneratedPassport: function() {
					this.selectedCountry.passportAndVisaDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-passport').modal("hide");
				},
				generateCountryAround: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me an overview of public transport in ${this.selectedCountry.name}. Respond in a maximum of 200 words with a couple of paragraphs. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-around').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the around', 'error');
						});
				},
				updateCountryGeneratedAround: function() {
					this.selectedCountry.gettingAroundDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-around').modal("hide");
				},
				generateCountryAttraction: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a list of the top tourist attractions in ${this.selectedCountry.name}? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-attraction').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the attraction', 'error');
						});
				},
				updateCountryGeneratedAttraction: function() {
					this.selectedCountry.attractionDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-attraction').modal("hide");
				},
				generateCountryHealth: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me two lines on public health facilities for travellers visiting ${this.selectedCountry.name}? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-health').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the health', 'error');
						});
				},
				updateCountryGeneratedHealth: function() {
					this.selectedCountry.health = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-health').modal("hide");
				},
				generateCountryTipping: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one line on the tipping culture/expectations in ${this.selectedCountry.name}? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-tipping').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the tipping', 'error');
						});
				},
				updateCountryGeneratedTipping: function() {
					this.selectedCountry.tipping = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-tipping').modal("hide");
				},
				generateCountryClimate: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a general summary of the climate in ${this.selectedCountry.name}. Respond in no more than 200 words and in two paragraphs? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-climate').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the climate', 'error');
						});
				},
				updateCountryGeneratedClimate: function() {
					this.selectedCountry.climateInfo = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-climate').modal("hide");
				},
				generateCountryClimate: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a general summary of the climate in ${this.selectedCountry.name}. Respond in no more than 200 words and in two paragraphs? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-climate').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the climate', 'error');
						});
				},
				updateCountryGeneratedClimate: function() {
					this.selectedCountry.climateInfo = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-climate').modal("hide");
				},
				generateCountrySafety: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one paragraph on traveller safety when visiting ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-safety').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the safety', 'error');
						});
				},
				updateCountrySafety: function() {
					this.selectedCountry.safety = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-safety').modal("hide");
				},
				generateCountryCustoms: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a summary of local customs & cultures in ${this.selectedCountry.name}? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-customs').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the customs', 'error');
						});
				},
				updateCountryGeneratedCustoms: function() {
					this.selectedCountry.customs = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-customs').modal("hide");
				},
				generateCountryDutyFree: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a summary of import and export restrictions if I'm travelling into ${this.selectedCountry.name}? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-duty-free').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the duty free', 'error');
						});
				},
				updateCountryGeneratedDutyFree: function() {
					this.selectedCountry.dutyFree = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-duty-free').modal("hide");
				},
				generateCountryMoney: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a short summary of money usage as a traveller in ${this.selectedCountry.name}? Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-money').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the money', 'error');
						});
				},
				updateCountryGeneratedMoney: function() {
					this.selectedCountry.money = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-money').modal("hide");
				},
				generateCountryEmergencyContact: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a concise overview of the emergency contact numbers for travellers in  ${this.selectedCountry.name}. Don't assume citizenship, keep it generic and to the point. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-emergency-contact').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the emergency contact', 'error');
						});
				},
				updateCountryGeneratedEmergencyContact: function() {
					this.selectedCountry.emergencyContact = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-emergency-contact').modal("hide");
				},
				generateCountryPublicHolidays: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What are the public holidays in ${this.selectedCountry.name} and are there any things I should consider as a traveller if I'm visiting during these?`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-country-content-public-holidays').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the Public Holidays', 'error');
						});
				},
				updateCountryGeneratedPublicHolidays: function() {
					this.selectedCountry.publicHolidays = this.generatedContent;
					this.generatedContent = '';
					$('#generated-country-content-public-holidays').modal("hide");
				},
				// DESTINATION
				generateDestinationOverview: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Generate a 300 word description for ${this.selectedDestination.name} with paragraphs.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function (response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the overview', 'error');
						});
				},
				updateDestinationGeneratedContent: function () {
					this.selectedDestination.overview = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content').modal("hide");
				},
				generateDestinationMetaDescription: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Generate a description for ${this.selectedDestination.name}, maximum 155 characters.`;
					axios.get(`api/content/generate?prompt=${prompt}&isMarkdown=false`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-meta-description').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the extended meta description', 'error');
						});
				},
				updatDestinationMetaDescription: function() {
					this.selectedDestination.metaDescription = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-meta-description').modal("hide");
				},
				generateDestinationBestTimeToVisit: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `When is the best time to visit ${this.selectedDestination.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-best-time-to-visit').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the Best Time To Visit', 'error');
						});
				},
				updateDestinationBestTimeToVisit: function() {
					this.selectedDestination.bestTimeToVisit = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-best-time-to-visit').modal("hide");
				},
				generateDestinationAttractions: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a list of the top tourist attractions in ${this.selectedDestination.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-attractions').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting the attraction', 'error');
						});
				},
				updateDestinationAttractions: function() {
					this.selectedDestination.attractions = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-attractions').modal("hide");
				},
				generateDestinationFacts: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me some interesting 'did you know' facts about ${this.selectedDestination.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-facts').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting facts', 'error');
						});
				},
				updateDestinationFacts: function() {
					this.selectedDestination.facts = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-facts').modal("hide");
				},
				generateDestinationFoodDrink: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What to eat and drink when visiting ${this.selectedDestination.name}.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-food-drink').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting food & drink', 'error');
						});
				},
				updateDestinationFoodDrink: function() {
					this.selectedDestination.foodAndDrink = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-food-drink').modal("hide");
				},
				generateDestinationWhatToPack: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me some suggestions on items to pack when visiting ${this.selectedDestination.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-what-to-pack').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting what to pack', 'error');
						});
				},
				updateDestinationWhatToPack: function() {
					this.selectedDestination.whatToPack = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-what-to-pack').modal("hide");
				},
				generateDestinationGettingAround: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me an overview of public transport in ${this.selectedDestination.name}. Respond in a maximum of 200 words with a couple of paragraphs. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-getting-around').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting getting around', 'error');
						});
				},
				updateDestinationGettingAround: function() {
					this.selectedDestination.gettingAround = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-getting-around').modal("hide");
				},
				generateDestinationSafety: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one paragraph on traveller safety when visiting ${this.selectedDestination.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-safety').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting getting around', 'error');
						});
				},
				updateDestinationSafety: function() {
					this.selectedDestination.safety = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-safety').modal("hide");
				},
				generateDestinationNightlife: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one paragraph on nightlife for travellers when visiting ${this.selectedDestination.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-nightlife').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting nightlife', 'error');
						});
				},
				updateDestinationNightlife: function() {
					this.selectedDestination.nightlife = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-nightlife').modal("hide");
				},
				generateDestinationShoppingDetails: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me one paragraph on shopping for travellers when visiting ${this.selectedDestination.name}, ${this.selectedCountry.name}. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					console.log(prompt)
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-shopping-detail').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting shopping detail', 'error');
						});
				},
				updateDestinationShoppingDetails: function() {
					this.selectedDestination.shoppingDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-shopping-detail').modal("hide");
				},
				generateDestinationEvents: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a list of popular events in ${this.selectedDestination.name} which a tourist might be interesting in seeing. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-events').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting events', 'error');
						});
				},
				updateDestinationEvents: function() {
					this.selectedDestination.events = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-events').modal("hide");
				},
				generateDestinationClimateDetails: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `Can you give me a general summary of the climate in ${this.selectedDestination.name}. Respond in no more than 200 words and in two paragraphs. Answer without using words like 'certainly', 'of course', 'sure', etc.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-climate-details').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting climate details', 'error');
						});
				},
				updateDestinationClimateDetails: function() {
					this.selectedDestination.climateDetails = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-climate-details').modal("hide");
				},
				generateDestinationFamilies: function () {
					var vm = this;
					this.generatingContent = true;
					var prompt = `What would be some interesting things to see/visit for travellers with children in ${this.selectedDestination.name}, ${this.selectedCountry.name}.`;
					axios.get(`api/content/generate?prompt=${prompt}`)
						.then(function(response) {
							vm.generatingContent = false;
							vm.generatedContent = response.data;
							vm.prompt = prompt;
							$('#generated-destination-content-families').modal("show");
						}).catch(() => {
							vm.generatingContent = false;
							globalNotification('There was an error generarting families', 'error');
						});
				},
				updateDestinationFamilies: function() {
					this.selectedDestination.families = this.generatedContent;
					this.generatedContent = '';
					$('#generated-destination-content-families').modal("hide");
				},
				getDestinations: function() {
					var vm = this;
					vm.loadingCountryDestinations = true;
					axios.get(`api/content/countries/${this.newDestination.countryCode}/destinations`)
						.then(function(response) {
							vm.loadingCountryDestinations = false;
							vm.newDestinationCountryDestinations = response.data;
						}).catch(() => {
							vm.loadingCountryDestinations = false;
							globalNotification('There was an error loading the countries destinations', 'error');
						});
				},
				filterCountries(value, data) {
					if (!value) return true;
					return data.name.toLowerCase().indexOf(value.toLowerCase()) !== -1;
				},
				uploadError: function(err, file, fileList) {
					globalNotification(err, 'error');
				},
				importJet2Hotels: function(response, file, fileList) {
					var vm = this;
					this.jet2HotelsJobId = null;
					var config = { headers: { 'Content-Type': 'application/json' } }
					axios.post('/api/content/import-jet2-hotels', null, config)
						.then(function(response) {
							vm.jet2HotelsJobId = response.data;
							globalNotification('Jet2 Hotels Updating', 'success');
						}).catch(() => {
								globalNotification('There was an error saving the hotels', 'error');
							}
						);
				},
				importJet2HotelImages: function(response, file, fileList) {
					var vm = this;
					this.jet2HotelImagesJobId = null;
					var config = { headers: { 'Content-Type': 'application/json' } }
					axios.post('/api/content/import-jet2-hotel-images', null, config)
						.then(function(response) {
							vm.jet2HotelImagesJobId = response.data;
							globalNotification('Jet2 Hotel Images Updating', 'success');
						}).catch(() => {
								globalNotification('There was an error saving the images', 'error');
							}
						);
				},
				loadDestinations(node, resolve) {
					//if (node.level === 0) {
					//    // This is a country, get destinations
					//    return resolve(this.countries);
					//}
					//if (node.level > 1) return resolve([]);
					if (typeof (node.data.type) !== 'undefined' && node.data.id) {
						// Destination
						axios.get(`/api/content/destinations/${node.data.id}/children`)
							.then(function(response) {
								resolve(response.data);
							});
					} else {
						axios.get(`/api/content/countries/${node.data.countryCode}/destinations`)
							.then(function(response) {
								resolve(response.data);
							});
					}
				},
				loadRegions: function() {
					var vm = this;
					axios.get('/api/content/regions')
						.then(function(response) {
							vm.regions = response.data;
						});
				},
				loadTimeZones: function() {
					var vm = this;
					axios.get('/api/forms/get-lists/timezones')
						.then(function(response) {
							vm.timezones = response.data;
						});
				},
				loadCountryList: function() {
					var vm = this;
					axios.get('/api/content/countries-list')
						.then(function(response) {
							vm.countryList = response.data;
						});
				},
				loadCountries: function() {
					var vm = this;
					axios.get('/api/content/countries')
						.then(function(response) {
							vm.countries = response.data;
							vm.countries.push({
								name: '* Unassociated Destinations',
								countryCode: null
							});
						});
				},
				showInfo: function(node, nodeProperty, tree) {
					this.selectedDestination = {
						name: "",
						aliases: "",
						countryCode: "",
						destinationCode: "",
						type: "",
						friendlyName: "",
						urlName: "",
						pageTitle: "",
						metaDescription: "",
						overview: "",
						featured: false,
						gettingAround: "",
						nightlife: "",
						shoppingDetails: "",
						climateDetails: "",
						longitude: "",
						latitude: "",
						location: "",
						transferTerminals: "",
						transferCity: "",
						carRental: "",
						taxi: "",
						airportFacilities: "",
						carParking: "",
						airportHotels: "",
						advisoryNotes: "",
						warningMessage: ""
					};

					this.selectedCountry = {
						name: "",
						aliases: "",
						friendlyName: "",
						urlName: "",
						pageTitle: "",
						metaDescription: "",
						countryCode: "",
						currencyCode: "",
						isoRegion: "",
						diallingCode: "",
						overview: "",
						extendedOverview: "",
						electricityDetails: "",
						currencyDetails: "",
						language: "",
						passportAndVisaDetails: "",
						gettingAroundDetails: "",
						attractionDetails: "",
						health: "",
						tipping: "",
						climateInfo: "",
						safety: "",
						customs: "",
						business: "",
						dutyFree: "",
						communications: "",
						money: "",
						contacts: "",
						embassyConsulatesIn: {
							us: "",
							uk: "",
							ca: "",
							za: "",
							ir: "",
							nz: ""
						},
						embassyConsulates: {
							us: "",
							uk: "",
							ca: "",
							za: "",
							ir: "",
							nz: ""
						},
						entryRequirements: {
							us: "",
							uk: "",
							ca: "",
							za: "",
							ir: "",
							nz: ""
						},
						advisoryNotes: "",
						warningMessage: ""
					};

					this.mode = 'country';
					if (typeof (node.type) == 'undefined') {
						// Country
						this.selectedCountry = node;

						this.countryTab = 'overview';
					} else {
						// Destination
						this.selectedDestination = node;

						this.selectedDestination.overview = node.overview ?? "";
						this.selectedDestination.extendedOverview = node.extendedOverview ?? "";
						this.selectedDestination.gettingAround = node.gettingAround ?? "";
						this.selectedDestination.nightlife = node.nightlife ?? "";
						this.selectedDestination.shoppingDetails = node.shoppingDetails ?? "";
						this.selectedDestination.sightseeingDetails = node.sightseeingDetails ?? "";
						this.selectedDestination.childAttractionDetails = node.childAttractionDetails ?? "";
						this.selectedDestination.restaurantDetails = node.restaurantDetails ?? "";
						this.selectedDestination.climateDetails = node.climateDetails ?? "";
						this.selectedDestination.activities = node.activities ?? "";
						this.selectedDestination.skiing = node.skiing ?? "";
						this.selectedDestination.location = node.location ?? "";
						this.selectedDestination.transferTerminals = node.transferTerminals ?? "";
						this.selectedDestination.transferCity = node.transferCity ?? "";
						this.selectedDestination.carRental = node.carRental ?? "";
						this.selectedDestination.taxi = node.taxi ?? "";
						this.selectedDestination.airportFacilities = node.airportFacilities ?? "";
						this.selectedDestination.carParking = node.carParking ?? "";
						this.selectedDestination.airportHotels = node.airportHotels ?? "";

						if (node.countryCode) {
							const matchedCountry = this.countries.find(c => c.countryCode === node.countryCode);
							if (matchedCountry) {
								this.selectedCountry = matchedCountry;
							}
						}
						this.mode = 'destination';
						this.destinationTab = 'overview';
					}
				},
				deleteImage: function(index, imagePath, contentType, imageType, contentId) {
					var vm = this;
					this.$confirm('This will permanently delete the file. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning'
						}).then(() => {
						axios.delete(`/api/content/content-image/${contentType}/${imageType}/${contentId}?path=${imagePath}`)
							.then(function() {
								//$(`img[src="${imagePath}"]`).parent().parent().remove();
								if (contentType === 'country') {
									if (imageType === 'narrow') {
										vm.selectedCountry.narrowImages.splice(index, 1);
									}
									if (imageType === 'banner') {
										vm.selectedCountry.bannerImages.splice(index, 1);
									}
									if (imageType === 'fullwidth') {
										vm.selectedCountry.fullWidthImages.splice(index, 1);
									}
									if (imageType === 'gallery') {
										vm.selectedCountry.galleryImages.splice(index, 1);
									}
								}
								if (contentType === 'destination') {
									if (imageType === 'narrow') {
										vm.selectedDestination.narrowImages.splice(index, 1);
									}
									if (imageType === 'banner') {
										vm.selectedDestination.bannerImages.splice(index, 1);
									}
									if (imageType === 'fullwidth') {
										vm.selectedDestination.fullWidthImages.splice(index, 1);
									}
									if (imageType === 'gallery') {
										vm.selectedDestination.galleryImages.splice(index, 1);
									}
								}
								globalNotification('Image deleted', 'success');
							}).catch(() => {
									globalNotification('There was an error deleting the image', 'error');
								}
							);
					});
				},
				countryImageUploaded: function(response, file, fileList) {
					if (response.indexOf("BANNER") !== -1) {
						this.selectedCountry.bannerImages.push(response);
					}
					if (response.indexOf("NARROW") !== -1) {
						this.selectedCountry.narrowImages.push(response);
					}
					if (response.indexOf("FULL") !== -1) {
						this.selectedCountry.fullWidthImages.push(response);
					}
					if (response.indexOf("GALLERY") !== -1) {
						this.selectedCountry.galleryImages.push(response);
					}
				},
				countryUploadError: function(err, file, fileList) {
					globalNotification(err, 'error');
				},
				saveCountry: function() {
					this.$validator.validateAll('country').then((result) => {
						if (result) {
							var vm = this;
							vm.saving = true;
							var data = JSON.stringify(this.selectedCountry);
							var config = { headers: { 'Content-Type': 'application/json' } }
							axios.post('/api/content/country', data, config)
								.then(function() {
									vm.saving = false;
									globalNotification('Country updated', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error saving the country', 'error');
								});
						}
					});
				},
				createCountry: function() {
					this.$validator.validateAll('new-country').then((result) => {
						if (result) {
							var vm = this;
							vm.saving = true;
							var data = JSON.stringify(this.newCountry);
							var config = { headers: { 'Content-Type': 'application/json' } }
							axios.post('/api/content/country', data, config)
								.then(function() {
									vm.saving = false;
									$('#new-country').modal("hide");
									vm.newCountry = {
										name: '',
										id: '',
										countryCode: '',
										parentId: null
									};
									vm.loadCountries();
									globalNotification('Country updated', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error saving the country', 'error');
								});
						}
					});
				},
				deleteCountry: function(countryId) {
					var vm = this;
					this.$confirm('Are you sure you want to delete this country and associated images?',
						'Warning',
						{
							confirmButtonText: 'Delete',
							cancelButtonText: 'Cancel',
							type: 'warning'
						}).then(() => {
						vm.saving = true;
						axios.delete(`/api/content/country/${countryId}`)
							.then(function() {
								vm.saving = false;
								vm.selectedCountry = null;
								vm.loadCountries();
								globalNotification('Country deleted', 'success');
							}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error deleting the country', 'error');
								}
							);
					});
				},
				destinationImageUploaded: function(response, file, fileList) {
					if (response.indexOf("BANNER") !== -1) {
						this.selectedDestination.bannerImages.push(response);
					}
					if (response.indexOf("NARROW") !== -1) {
						this.selectedDestination.narrowImages.push(response);
					}
					if (response.indexOf("FULL") !== -1) {
						this.selectedDestination.fullWidthImages.push(response);
					}
					if (response.indexOf("GALLERY") !== -1) {
						this.selectedDestination.galleryImages.push(response);
					}
				},
				destinationUploadError: function(err, file, fileList) {
					globalNotification(err, 'error');
				},
				createDestination: function() {
					this.$validator.validateAll('new-destination').then((result) => {
						if (result) {
							var vm = this;
							vm.saving = true;
							var data = JSON.stringify(this.newDestination);
							var config = { headers: { 'Content-Type': 'application/json' } }
							axios.post('/api/content/destination', data, config)
								.then(function() {
									vm.saving = false;
									$('#new-destination').modal('hide');
									vm.newDestination = {
										name: '',
										id: '',
										countryCode: null,
										parentId: null,
										type: null
									};
									vm.loadCountries();
									globalNotification('Destination created', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error saving the destination', 'error');
								});
						}
					});
				},
				saveDestination: function() {
					this.$validator.validateAll('destination').then((result) => {
						if (result) {
							var vm = this;
							var data = JSON.stringify(this.selectedDestination);
							var config = { headers: { 'Content-Type': 'application/json' } }
							vm.saving = true;
							axios.post('/api/content/destination', data, config)
								.then(function() {
									vm.saving = false;
									globalNotification('Destination updated', 'success');
								}).catch(() => {
									vm.saving = false;
									globalNotification('There was an error saving the destination', 'error');
								});
						}
					});
				},
				deleteDestination: function(countryId) {
					var vm = this;
					this.$confirm('Are you sure you want to delete this destination and associated images?',
						'Warning',
						{
							confirmButtonText: 'Delete',
							cancelButtonText: 'Cancel',
							type: 'warning'
						}).then(() => {
						vm.saving = true;
						axios.delete(`/api/content/destination/${countryId}`)
							.then(function() {
								vm.saving = false;
								vm.selectedDestination = null;
								vm.loadCountries();
								globalNotification('Destination deleted', 'success');
							}).catch(error => {
									vm.saving = false;
									if (error.response.data != 'An internal error occurred') {
										globalNotification(error.response.data, 'error');
									} else {
										globalNotification('There was an error deleting the destination', 'error');
									}
								}
							);
					});
				},
				renderContent(h, { node, data, store }) {
					var nodePrefix = "";
					if (typeof (node.data.type) === 'undefined') { //node.isLeaf == false) {
						nodePrefix = "<i class='fa fa-globe'></i> ";
					} else {
						nodePrefix = this.getIcon(node.data.type);
					}
					let btn = h('span',
						{
							domProps: {
								innerHTML: nodePrefix + node.label
							}
						});
					return btn;
				},
				getIcon: function(typeId) {
					if (typeId == 1) {
						// City
						return "<i class='fa fa-building'></i> ";
					}
					if (typeId == 2) {
						// Region
						return "<i class='fa fa-map-pin'></i> ";
					}
					if (typeId == 3) {
						// Port
						return "<i class='fa fa-ship'></i> ";
					}
					if (typeId == 4) {
						// City
						return "<i class='fa fa-plane'></i> ";
					}
					if (typeId == 5) {
						// Train Station
						return "<i class='fa fa-train'></i> ";
					}
					return '';
				},
				handleDrop(draggingNode, dropNode, dropType, ev) {
					//if (typeof (dropNode.data.type) === 'undefined') {
					//    // Country drop
					//    draggingNode.data.parentId = null;
					//} else {
					//    // Parent destination drop
					//    draggingNode.data.parentId = dropNode.data.id;
					//}

					var parentId = null;
					if (dropType === 'before' || dropType === 'after') {
						console.log("before/after - Dropped On:", dropNode.data.name);
						parentId = dropNode.data.parentId;
					} else if (dropType === 'inner') {
						console.log("inner - Dropped On:", dropNode.data.name);
						parentId = dropNode.data.id;
					}

					draggingNode.data.parentId = parentId;

					var data = JSON.stringify(draggingNode.data);
					var config = { headers: { 'Content-Type': 'application/json' } }
					axios.post('/api/content/destination', data, config)
						.then(function() {
							globalNotification('Destination updated', 'success');
						}).catch(() => {
							globalNotification('There was an error saving the destination', 'error');
						});
				},
				allowDrop(draggingNode, dropNode, type) {
					if (typeof (dropNode.data.type) == 'undefined') {
						return false;
					}

					if (draggingNode.data.countryCode.toLowerCase() == dropNode.data.countryCode.toLowerCase()) {
						return true;
					}

					return false;
				},
				allowDrag(draggingNode) {
					if (typeof (draggingNode.data.region) !== 'undefined') {
						return false;
					}

					return true;
				},
				addCountryVideo: function() {
					this.$validator.validateAll("countryVideo").then((result) => {
						if (result) {
							this.selectedCountry.videos.push({
								mediaType: 1,
								url: this.countryVideoUrl,
								title: null,
								credit: null,
								date: null,
							});
							this.countryVideoUrl = "";
						}
					});
				},
				removeCountryVideo: function(index) {
					this.$confirm("Are you sure you want to delete this video?",
						"Warning",
						{
							confirmButtonText: "Delete",
							cancelButtonText: "Cancel",
							type: "warning",
							confirmButtonClass: 'btn btn-danger',
							cancelButtonClass: 'btn btn-default'
						}).then(() => {
						this.selectedCountry.videos.splice(index, 1);
					});
				},
				addDestinationVideo: function() {
					this.$validator.validateAll("destinationVideo").then((result) => {
						if (result) {
							this.selectedDestination.videos.push({
								mediaType: 1,
								url: this.destinationVideoUrl,
								title: null,
								credit: null,
								date: null,
							});
							this.destinationVideoUrl = "";
						}
					});
				},
				removeDestinationVideo: function(index) {
					this.$confirm("Are you sure you want to delete this video?",
						"Warning",
						{
							confirmButtonText: "Delete",
							cancelButtonText: "Cancel",
							type: "warning",
							confirmButtonClass: 'btn btn-danger',
							cancelButtonClass: 'btn btn-default'
						}).then(() => {
						this.selectedDestination.videos.splice(index, 1);
					});
				},
				performSync: function() {
					this.saving = true;
					try {
						if (this.syncCountries) {
							this.syncAllCountries();
						}

						if (this.syncDestinations) {
							this.syncAllDestinations();
						}
					} finally {
						this.saving = false;
						this.syncCountries = false;
						this.syncDestinations = false;
					}
				},
				syncAllCountries: function() {
					var vm = this;
					this.$confirm('Do you want to sync all countries?',
					'Warning',
					{
						confirmButtonText: 'OK',
						cancelButtonText: 'Cancel',
						type: 'warning'
					}).then(() => {
						vm.saving = true;
						$('#sync-all').modal("hide");

						var config = { headers: { 'Content-Type': 'application/json' } }

						try {

							var extJob = vm.$cookies.get(vm.syncAllCountriesJobCookieName);

							if (extJob) {
								axios.get(`/api/background-jobs/${extJob}/status`)
								.then(function (response) {
									var status = response.data;
									if (status == "Enqueued" || status == "Scheduled" || status == "Processing") {
										vm.syncAllCountriesJobId = extJob;
									} else {
										const response = axios.post('/api/content/bulk-update-countries', config)
										.then(function (response) {
											vm.syncAllCountriesJobId = response.data;
											vm.$cookies.set(vm.syncAllCountriesJobCookieName, response.data);
										});
									}
								}).catch(error => {
									const response = axios.post('/api/content/bulk-update-countries', config)
									.then(function (response) {
										vm.syncAllCountriesJobId = response.data;
										vm.$cookies.set(vm.syncAllCountriesJobCookieName, response.data);
									});
								});
							} else {
								const response = axios.post('/api/content/bulk-update-countries', config)
								.then(function (response) {
									vm.syncAllCountriesJobId = response.data;
									vm.$cookies.set(vm.syncAllCountriesJobCookieName, response.data);
								});
							}

						} catch (err) {
							console.error(err);
							globalNotification('There was an error syncing all countries', 'error');
						} finally {
							vm.saving = false;
						}
					});
				},
				syncAllDestinations: function () {
					const vm = this;
					this.$confirm('Do you want to sync all destinations?',
					'Warning',
					{
						confirmButtonText: 'OK',
						cancelButtonText: 'Cancel',
						type: 'warning'
					}).then(() => {
						vm.saving = true;
						$('#sync-all').modal("hide");

						const config = { headers: { 'Content-Type': 'application/json' } };

						try {

							var extJob = vm.$cookies.get(vm.syncAllDestinationsJobCookieName);

							if (extJob) {
								axios.get(`/api/background-jobs/${extJob}/status`)
								.then(function (response) {
									var status = response.data;
									if (status == "Enqueued" || status == "Scheduled" || status == "Processing") {
											vm.syncAllDestinationsJobId = extJob;
									} else {
										const response = axios.post('/api/content/bulk-update-destinations', config)
										.then(function (response) {
											vm.syncAllDestinationsJobId = response.data;
											vm.$cookies.set(vm.syncAllDestinationsJobCookieName, response.data);
										});
									}
								}).catch(error => {
									const response = axios.post('/api/content/bulk-update-destinations', config)
									.then(function (response) {
										vm.syncAllDestinationsJobId = response.data;
										vm.$cookies.set(vm.syncAllDestinationsJobCookieName, response.data);
									});
								});
							} else {
								const response = axios.post('/api/content/bulk-update-destinations', config)
								.then(function (response) {
									vm.syncAllDestinationsJobId = response.data;
									vm.$cookies.set(vm.syncAllDestinationsJobCookieName, response.data);
								});
							}

						} catch (err) {
							console.error(err);
							globalNotification('There was an error syncing all destinations', 'error');
						} finally {
							vm.saving = false;
						}
					});
				},
				handleCommand(command) {
					if (command === 'syncAllDestinationsOfCountry') {
						this.syncAllDestinationsOfCountry();
					} else if (command === 'syncSingleCountry') {
						this.syncSingleCountry();
					} else if (command === 'syncSingleDestination') {
						this.syncSingleDestination();
					}
				},
				syncAllDestinationsOfCountry: function () {
					const vm = this;
					this.$confirm(`Do you want to sync all desstinations of ${vm.selectedCountry.name}?`,
					'Warning',
					{
						confirmButtonText: 'OK',
						cancelButtonText: 'Cancel',
						type: 'warning'
					}).then(() => {
						vm.saving = true;
						const config = { headers: { 'Content-Type': 'application/json' } };
						var data = JSON.stringify({ countryCode: vm.selectedCountry.countryCode });
						globalNotification(`Starting to sync all destinations of ${vm.selectedCountry.name}...`, 'success');
						try {
							var extJob = vm.$cookies.get(vm.syncAllDestinationsOfCountryJobCookieName);

							if (extJob) {
								axios.get(`/api/background-jobs/${extJob}/status`)
								.then(function (response) {
									var status = response.data;
									if (status == "Enqueued" || status == "Scheduled" || status == "Processing") {
										vm.syncAllDestinationsOfCountryJobId = extJob;
									} else {
										axios.post(`/api/content/bulk-update-destinations-of-country`, data, config)
										.then(function (response) {
											vm.syncAllDestinationsOfCountryJobId = response.data;
											vm.$cookies.set(vm.syncAllDestinationsOfCountryJobCookieName, response.data);
										});
									}
								}).catch(error => {
									axios.post(`/api/content/bulk-update-destinations-of-country`, data, config)
									.then(function (response) {
										vm.syncAllDestinationsOfCountryJobId = response.data;
										vm.$cookies.set(vm.syncAllDestinationsOfCountryJobCookieName, response.data);
									});
								});
							} else {
								axios.post(`/api/content/bulk-update-destinations-of-country`, data, config)
								.then(function (response) {
									vm.syncAllDestinationsOfCountryJobId = response.data;
									vm.$cookies.set(vm.syncAllDestinationsOfCountryJobCookieName, response.data);
								});
							}
						} catch (err) {
							console.log(err);
							globalNotification('There was an error syncing destinations', 'error');
						} finally {
							vm.saving = false;
						}
					});

				},
				syncSingleCountry: function () {
					const vm = this;
					this.$confirm(`Do you want to sync ${vm.selectedCountry.name}?`,
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning'
						})
						.then(() => {
							vm.saving = true;
							const config = { headers: { 'Content-Type': 'application/json' } };
							var data = JSON.stringify({CountryCodes: [vm.selectedCountry.countryCode]});
							globalNotification(`Starting to sync country ${vm.selectedCountry.name}...`, 'success');
							try {
								var extJob = vm.$cookies.get(vm.syncSingleCountryJobCookieName);
								if (extJob) {
									axios.get(`/api/background-jobs/${extJob}/status`)
									.then(function (response) {
										var status = response.data;
										if (status == "Enqueued" || status == "Scheduled" || status == "Processing") {
											vm.syncSingleCountryJobId = extJob;
										} else {
											axios.post(`/api/content/bulk-update-countries`, data, config)
											.then(function (response) {
												vm.syncSingleCountryJobId = response.data;
												vm.$cookies.set(vm.syncSingleCountryJobCookieName, response.data);
											});
										}
									}).catch(error => {
										axios.post(`/api/content/bulk-update-countries`, data, config)
										.then(function (response) {
											vm.syncSingleCountryJobId = response.data;
											vm.$cookies.set(vm.syncSingleCountryJobCookieName, response.data);
										});
									});
								} else {
									axios.post(`/api/content/bulk-update-countries`, data, config)
									.then(function (response) {
										vm.syncSingleCountryJobId = response.data;
										vm.$cookies.set(vm.syncSingleCountryJobCookieName, response.data);
									});
								}
						} catch (err) {
							console.log(err);
							globalNotification('There was an error syncing country', 'error');
						} finally {
							vm.saving = false;
						}
					});
				},
				syncSingleDestination: function () {
					const vm = this;
					this.$confirm(`Do you want to sync ${vm.selectedDestination.name}?`,
						'Warning',
					{
						confirmButtonText: 'OK',
						cancelButtonText: 'Cancel',
						type: 'warning'
					}).then(() => {
						vm.saving = true;
						const config = { headers: { 'Content-Type': 'application/json' } };
						var data = JSON.stringify({ DestinationIds: [vm.selectedDestination.id] });
						globalNotification(`Starting to sync destination ${vm.selectedDestination.name}...`, 'success');
						try {
							var extJob = vm.$cookies.get(vm.syncSingleDestinationJobCookieName);
							if (extJob) {
								axios.get(`/api/background-jobs/${extJob}/status`)
								.then(function (response) {
									var status = response.data;
									if (status == "Enqueued" || status == "Scheduled" || status == "Processing") {
										vm.syncSingleDestinationJobId = extJob;
									} else {
										axios.post(`/api/content/bulk-update-destinations`, data, config)
										.then(function (response) {
											vm.syncSingleDestinationJobId = response.data;
											vm.$cookies.set(vm.syncSingleDestinationJobCookieName, response.data);
										});
									}
								}).catch(error => {
									axios.post(`/api/content/bulk-update-destinations`, data, config)
									.then(function (response) {
										vm.syncSingleDestinationJobId = response.data;
										vm.$cookies.set(vm.syncSingleDestinationJobCookieName, response.data);
									});
								});
							} else {
								axios.post(`/api/content/bulk-update-destinations`, data, config)
								.then(function (response) {
									vm.syncSingleDestinationJobId = response.data;
									vm.$cookies.set(vm.syncSingleDestinationJobCookieName, response.data);
								});
							}
						} catch (err) {
							console.log(err);
							globalNotification('There was an error syncing destionation', 'error');
						} finally {
							vm.saving = false;
						}
					});
				},
			}
		}
	);

	Vue.component("tag-select",
		{
			template: `<div>
			<el-tag
				type="info"
				effect="plain"
				:key="tag.id"
				v-for="(tag, index) in tags"
				:closable="allowDelete"
				:disable-transitions="false"
				v-on:close="handleRemove(index)">
			  {{tag.value}}
			</el-tag>
			<el-autocomplete
				style="margin-left:8px;"
				v-if="inputVisible"
				v-model="newTag"
				:fetch-suggestions="search"
				placeholder="Search..."
				ref="saveTagInput"
				size="medium"
				v-on:select="tagSelected"
				v-on:keyup.enter.native="handleInputConfirm"
				v-on:blur="blurEvent">
			</el-autocomplete>
			<el-button v-if="!inputVisible && allowAdd" style="margin-left:8px;" type="info" plain size="small" v-on:click="showInput" icon="el-icon-plus">New Tag</el-button>
			</div>`,
			props: {
			  value: {
				type: Array,
				default: () => []
			  },
			  allowAdd: {
				type: Boolean,
				default: true,
				required: false
			  },
			  allowDelete: {
				type: Boolean,
				default: true,
				required: false
			  }
			},
			data: function () {
				return {
					tags: this.value,
					newTag: null,
					searching: false,
					inputVisible: false,
				}
			},
			methods: {
				search: function (query, cb) {
					var vm = this;
					vm.isLoading = true;
					axios.get(`/api/meta/tags/search?searchTerm=${query}&`)
						.then(function (response) {
							cb(response.data);
						})
						.catch(error => globalNotification('Error searching tags.', 'error'));
				},
				tagSelected: function (newItem) {
					if (this.tags != null && this.tags.some(e => e.value === newItem.value)) {
						this.inputVisible = false;
						this.newTag = null;
						return
					}
					this.tags.push(newItem);
					this.$emit('input', this.tags);
					this.inputVisible = false;
					this.newTag = null;
				},
				handleRemove(index) {
					this.tags.splice(index, 1);
				},
				showInput() {
					this.inputVisible = true;
					this.$nextTick(_ => {
					  this.$refs.saveTagInput.$refs.input.focus();
					});
				},
				handleInputConfirm() {
					if (!this.newTag) {
						this.inputVisible = false;
						this.newTag = null;
						return
					}

					if (this.tags != null && this.tags.some(e => e.value === this.newTag)) {
						this.inputVisible = false;
						this.newTag = null;
						return
					}

					var vm = this;
					axios.post(`/api/meta/tags?tag=${this.newTag}&`)
						.then(function (response) {
							vm.tags.push(response.data);
							vm.$emit('input', vm.tags);
							vm.inputVisible = false;
							vm.newTag = null;
						})
						.catch(error => globalNotification('Unable to add the new tag.', 'error'));
				},
				blurEvent: function() {
					if (!this.newTag) {
						this.inputVisible = false;
						this.newTag = null;
						return
					}
				}
			}
		});

	new Vue({ el: '#holder' });

	$(document).ready(function() {
		$('#country-sync').on('click',
			function(e) {
				e.preventDefault();
				$(this).attr('disabled', 'disabled');
				$.post('/content/sync-countries').done(function() {
					$('#country-sync').removeAttr('disabled');
					globalNotification('Countries synced', 'success');
				}).fail(function() {
					$('#country-sync').removeAttr('disabled');
					globalNotification('Error syncing countries', 'error');
				});
			});
	});
</script>PKÛ¹IÚý^ ý^ PK    ýLZ               Content/_MetaTags.cshtmlï»¿<meta-tag-manager></meta-tag-manager>
<script id="meta-tag-manager" type="text/html">
	<div class="block block-room-manager">
		<div class="padding-block gray-light-block margin-bottom-sm form-inverse form-responsive">
			<div class="row">
				<div class="col-md-2">
					<div class="form-group">
						<el-input placeholder="Search"
								  name="search"
								  clearable
								  v-on:keyup.enter.native="search"
								  prefix-icon="el-icon-search"
								  v-on:change="searchChange"
								  class="form-control"
								  v-model="searchText">
						</el-input>
					</div>
				</div>
				<div class="col-md-10 text-right">
					<button class="btn btn btn-secondary pull-right" v-on:click="addTag"><span class="glyphicon glyphicon-plus"></span> Add Tag</button>
				</div>
			</div>
		</div>
		<div class="row" v-if="tags.length > 0">
			<div class="col-sm-4">
				<div v-if="paginationOptions.totalCount > 0" class="pseudo-btn">
					<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
				</div>
			</div>
			<div class="col-sm-2 col-sm-offset-4">

			</div>
			<div class="col-sm-2">
				<div class="form-group">
					<el-select v-model="paginationOptions.itemsPerPage" v-on:change="changePageSize" class="form-control">
						<el-option v-for="option in pageSizeOptions" :key="option.value" :value="option.value" :label="option.text">
						</el-option>
					</el-select>
				</div>
			</div>
		</div>
		<el-alert v-if="tags.length == 0 && !isLoading" title="No custom tags have been defined yet."
				  type="info"
				  show-icon
				  :closable="false">
		</el-alert>
		<table class="table table-striped table-primary" v-if="tags.length > 0">
			<thead>
				<tr>
					<th>Tag</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				<tr v-for="(tag, index) in tags">
					<td>{{tag.value}}</td>
					<td>
						<button class="btn btn-primary pull-right" v-on:click="editTag(index)"><span class="glyphicon glyphicon-pencil"></span> Edit</button>
					</td>
				</tr>
			</tbody>
		</table>
		<div class="pagination-block" v-if="tags.length > 0">
			<div v-if="paginationOptions.totalCount > 0">
				<strong>Showing:</strong> {{paginationOptions.startFrom}} to {{paginationOptions.endFrom}} of {{paginationOptions.totalCount}} entries
			</div>
			<nav v-if="paginationOptions.totalCount > paginationOptions.itemsPerPage">
				<el-pagination background
							   :page-size="paginationOptions.itemsPerPage"
							   :current-page.sync="paginationOptions.currentPage"
							   v-on:current-change="pageChanged"
							   layout="prev, pager, next"
							   :total="paginationOptions.totalCount">
				</el-pagination>
			</nav>
		</div>
		<!-- Modal -->
		<div class="modal fade" id="tag" aria-labelledby="actionLabel">
			<div class="modal-dialog modal-lg">
				<div class="modal-content" v-if="tag != null">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<h4 class="modal-title" id="actionLabel">Tag</h4>
					</div>
					<div class="modal-body">
						<div :class="[errors.has('value') ? 'has-error': '', 'form-group']">
							<label>Value</label>
							<input type="text" v-model="tag.value" v-validate="'required'" class="form-control" name="value" placeholder="Tag value" />
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-primary pull-right" v-on:click="saveTag" v-html="tag.id == null ? 'Add' : 'Save'"></el-button>
						<el-button :loading="saving" :disabled="saving" class="btn btn-danger pull-right" v-on:click="deleteTag" v-if="tag.id != null">Delete</el-button>
					</div>
				</div>
			</div>
		</div>
	</div>
</script>
<script type="text/javascript">
	Vue.component("meta-tag-manager",
		{
			template: `#meta-tag-manager`,
			data: function () {
				return {
					tags: [],
					tag: null,
					saving: false,
					isLoading: false,
					searchText: '',
					paginationOptions: {
						currentPage: 1,
						totalPages: 2,
						itemsPerPage: 25,
						totalCount: 1,
						startFrom: 1,
						endFrom: 1
					},
					pageSizeOptions: [
						{
							text: 'Show 10 records',
							value: 10
						}, {
							text: 'Show 25 records',
							value: 25
						}, {
							text: 'Show 50 records',
							value: 50
						}, {
							text: 'Show 100 records',
							value: 100
						}
					]
				}
			},
			created: function () {
				this.loadTags();
			},
			methods: {
				loadTags: function () {
					var vm = this;
					vm.isLoading = true;
					axios.get(`/api/meta/tags?searchTerm=${vm.searchText}&page=${vm.paginationOptions.currentPage}&itemsPerPage=${vm.paginationOptions.itemsPerPage}`).then(function (response) {
						vm.tags = response.data.tags;
						vm.isLoading = false;
						vm.paginationOptions.currentPage = response.data.page;
						vm.paginationOptions.totalPages = response.data.totalPages;
						vm.paginationOptions.itemsPerPage = response.data.itemsPerPage;
						vm.paginationOptions.totalCount = response.data.totalCount;
						vm.paginationOptions.startFrom = 1 + (response.data.itemsPerPage * (response.data.page - 1));
						vm.paginationOptions.endFrom = response.data.tags.length + (response.data.itemsPerPage * (response.data.page - 1));
					}).catch(error => globalNotification('Error loading tags.', 'error'));
				},
				pageChanged(pageNum) {
					this.paginationOptions.currentPage = pageNum;
					this.loadTags();
				},
				changePageSize: function () {
					this.paginationOptions.currentPage = 1;
					this.loadTags();
				},
				search: function () {
					this.paginationOptions.currentPage = 1;
					this.searching = true;
					this.loadTags();
				},
				reset: function () {
					this.searchText = '';
					this.paginationOptions.currentPage = 1;
					this.loadTags();
				},
				searchChange: function(value) {
					if (value === '') {
						this.reset();
					}
				},
				editTag: function (index) {
					this.tag = this.tags[index];
					$('#tag').modal('show');
				},
				addTag: function () {
					this.tag = {
						id: null,
						value: null
					};
					$('#tag').modal('show');
				},
				saveTag: function () {
					this.$validator.validateAll().then((result) => {
						if (result) {
							this.saving = true;
							var vm = this;
							var data = JSON.stringify(this.tag);
							var config = { headers: { 'Content-Type': 'application/json' } };
							if (this.tag.id == null) {
								axios.put('/api/meta/tags', data, config).then(function () {
									globalNotification('Tag created.', 'success');
									vm.saving = false;
									vm.loadTags();
								}).catch(function () {
									vm.saving = false;
									globalNotification('Error creating tag.', 'error');
								});
							} else {
								axios.patch('/api/meta/tags/' + this.tag.id, data, config).then(
									function () {
										globalNotification('Tag saved.', 'success');
										vm.saving = false;
									}).catch(function () {
										vm.saving = false;
										globalNotification('Error saving tag.', 'error');
									});
							}
							$('#tag').modal('hide');
						}
					});
				},
				deleteTag: function () {
					this.$confirm(
						'This will permanently delete the tag as well as removing it from all associated items. Continue?',
						'Warning',
						{
							confirmButtonText: 'OK',
							cancelButtonText: 'Cancel',
							type: 'warning',
							cancelButtonClass: 'btn btn-default',
							confirmButtonClass:'btn btn-danger'

						}).then(() => {
							this.saving = true;
							var vm = this;
							axios.delete('/api/meta/tags/' + this.tag.id).then(function () {
								vm.saving = false;
								globalNotification('Tag deleted.', 'success');
								vm.loadTags();
								$('#tag').modal('hide');
							}).catch(function () {
								vm.saving = false;
								globalNotification('Error deleting tag.', 'error');
							});
						});
				}
			}
		});
</script>