using System.Text;
using System.Text.Json;
using RestX.WebApp.Models;
using RestX.WebApp.Services.Interfaces;

namespace RestX.WebApp.Services.Services
{
    public class AiService : BaseService, IAiService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly IDishService _dishService;
        private readonly ICategoryService _categoryService;
        private readonly IOwnerService _ownerService;
        private readonly string _apiKey;
        private readonly string _apiUrl;

        public AiService(
            IRepository repo, 
            IHttpContextAccessor httpContextAccessor,
            HttpClient httpClient,
            IConfiguration configuration,
            IDishService dishService,
            ICategoryService categoryService,
            IOwnerService ownerService) 
            : base(repo, httpContextAccessor)
        {
            _httpClient = httpClient;
            _configuration = configuration;
            _dishService = dishService;
            _categoryService = categoryService;
            _ownerService = ownerService;
            _apiKey = _configuration["GeminiApi:ApiKey"];
            _apiUrl = _configuration["GeminiApi:Url"];
        }

        public async Task<string> GetDishSuggestionsAsync(string userMessage, Guid ownerId)
        {
            try
            {
                // Get restaurant's menu data
                var dishes = await _dishService.GetDishesByOwnerIdAsync();
                var categories = await _categoryService.GetCategoriesAsync();
                
                // Get restaurant information
                var owner = await _ownerService.GetOwnerByIdAsync(ownerId);
                var restaurantName = owner?.Name ?? "Nh√† h√†ng";

                // Build context about the restaurant's menu
                var menuContext = BuildMenuContext(dishes, categories);

                // Create AI prompt for dish suggestions
                var prompt = $@"B·∫°n l√† m·ªôt AI assistant th√¥ng minh cho {restaurantName}. D·ª±a v√†o th·ª±c ƒë∆°n c·ªßa nh√† h√†ng v√† y√™u c·∫ßu c·ªßa kh√°ch h√†ng, h√£y g·ª£i √Ω nh·ªØng m√≥n ƒÉn ph√π h·ª£p.

TH·ª∞C ƒê∆†N NH√Ä H√ÄNG:
{menuContext}

Y√äU C·∫¶U KH√ÅCH H√ÄNG: {userMessage}

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√†:
1. G·ª£i √Ω 2-3 m√≥n ƒÉn ph√π h·ª£p nh·∫•t t·ª´ th·ª±c ƒë∆°n
2. Gi·∫£i th√≠ch t·∫°i sao g·ª£i √Ω nh·ªØng m√≥n n√†y
3. ƒê∆∞a ra th√¥ng tin v·ªÅ gi√° c·∫£
4. C√≥ th·ªÉ g·ª£i √Ω combo ho·∫∑c th·ª©c u·ªëng k√®m theo
5. S·ª≠ d·ª•ng emoji ƒë·ªÉ l√†m c√¢u tr·∫£ l·ªùi sinh ƒë·ªông h∆°n

Tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† chuy√™n nghi·ªáp nh∆∞ m·ªôt nh√¢n vi√™n t∆∞ v·∫•n gi·ªèi.";

                return await CallGeminiApiAsync(prompt);
            }
            catch (Exception ex)
            {
                return $"Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng AI ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau. ‚ùå\n\nL·ªói: {ex.Message}";
            }
        }

        public async Task<string> ChatWithAiAsync(string userMessage, string conversationHistory)
        {
            try
            {
                var prompt = $@"B·∫°n l√† m·ªôt AI assistant th√¢n thi·ªán cho nh√† h√†ng. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch nhi·ªát t√¨nh v√† h·ªØu √≠ch.

L·ªäCH S·ª¨ H·ªòI THO·∫†I:
{conversationHistory}

KH√ÅCH H√ÄNG: {userMessage}

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† s·ª≠ d·ª•ng emoji ph√π h·ª£p.";

                return await CallGeminiApiAsync(prompt);
            }
            catch (Exception ex)
            {
                return $"Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau. ‚ùå\n\nL·ªói: {ex.Message}";
            }
        }

        private string BuildMenuContext(List<Dish> dishes, List<Category> categories)
        {
            var menuBuilder = new StringBuilder();
            
            foreach (var category in categories)
            {
                var categoryDishes = dishes.Where(d => d.CategoryId == category.Id).ToList();
                if (categoryDishes.Any())
                {
                    menuBuilder.AppendLine($"\nüìÇ {category.Name.ToUpper()}:");
                    foreach (var dish in categoryDishes)
                    {
                        menuBuilder.AppendLine($"   ‚Ä¢ {dish.Name} - {dish.Price:N0}ƒë");
                        if (!string.IsNullOrEmpty(dish.Description))
                        {
                            menuBuilder.AppendLine($"     M√¥ t·∫£: {dish.Description}");
                        }
                    }
                }
            }

            return menuBuilder.ToString();
        }

        private async Task<string> CallGeminiApiAsync(string prompt)
        {
            if (string.IsNullOrEmpty(_apiKey))
            {
                return "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API key cho Gemini AI. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.";
            }

            var requestBody = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = prompt }
                        }
                    }
                },
                generationConfig = new
                {
                    temperature = 0.7,
                    topP = 0.8,
                    topK = 40,
                    maxOutputTokens = 1024
                }
            };

            var json = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync($"{_apiUrl}?key={_apiKey}", content);
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var geminiResponse = JsonSerializer.Deserialize<GeminiResponse>(responseContent);
                
                return geminiResponse?.candidates?.FirstOrDefault()?.content?.parts?.FirstOrDefault()?.text 
                       ?? "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi l√∫c n√†y. üòî";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                return $"‚ö†Ô∏è L·ªói API: {response.StatusCode}\n{errorContent}";
            }
        }
    }

    // Gemini API Response Models
    public class GeminiResponse
    {
        public List<GeminiCandidate> candidates { get; set; }
    }

    public class GeminiCandidate
    {
        public GeminiContent content { get; set; }
    }

    public class GeminiContent
    {
        public List<GeminiPart> parts { get; set; }
    }

    public class GeminiPart
    {
        public string text { get; set; }
    }
} 